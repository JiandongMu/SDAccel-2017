// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="krnl_vadd_rtl,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=2312,HLS_SYN_LUT=3770}" *)

module krnl_vadd_rtl (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 406'd1;
parameter    ap_ST_fsm_state2 = 406'd2;
parameter    ap_ST_fsm_state3 = 406'd4;
parameter    ap_ST_fsm_state4 = 406'd8;
parameter    ap_ST_fsm_state5 = 406'd16;
parameter    ap_ST_fsm_state6 = 406'd32;
parameter    ap_ST_fsm_state7 = 406'd64;
parameter    ap_ST_fsm_state8 = 406'd128;
parameter    ap_ST_fsm_state9 = 406'd256;
parameter    ap_ST_fsm_state10 = 406'd512;
parameter    ap_ST_fsm_state11 = 406'd1024;
parameter    ap_ST_fsm_state12 = 406'd2048;
parameter    ap_ST_fsm_state13 = 406'd4096;
parameter    ap_ST_fsm_state14 = 406'd8192;
parameter    ap_ST_fsm_state15 = 406'd16384;
parameter    ap_ST_fsm_state16 = 406'd32768;
parameter    ap_ST_fsm_state17 = 406'd65536;
parameter    ap_ST_fsm_state18 = 406'd131072;
parameter    ap_ST_fsm_state19 = 406'd262144;
parameter    ap_ST_fsm_state20 = 406'd524288;
parameter    ap_ST_fsm_state21 = 406'd1048576;
parameter    ap_ST_fsm_state22 = 406'd2097152;
parameter    ap_ST_fsm_state23 = 406'd4194304;
parameter    ap_ST_fsm_state24 = 406'd8388608;
parameter    ap_ST_fsm_state25 = 406'd16777216;
parameter    ap_ST_fsm_state26 = 406'd33554432;
parameter    ap_ST_fsm_state27 = 406'd67108864;
parameter    ap_ST_fsm_state28 = 406'd134217728;
parameter    ap_ST_fsm_state29 = 406'd268435456;
parameter    ap_ST_fsm_state30 = 406'd536870912;
parameter    ap_ST_fsm_state31 = 406'd1073741824;
parameter    ap_ST_fsm_state32 = 406'd2147483648;
parameter    ap_ST_fsm_state33 = 406'd4294967296;
parameter    ap_ST_fsm_state34 = 406'd8589934592;
parameter    ap_ST_fsm_state35 = 406'd17179869184;
parameter    ap_ST_fsm_state36 = 406'd34359738368;
parameter    ap_ST_fsm_state37 = 406'd68719476736;
parameter    ap_ST_fsm_state38 = 406'd137438953472;
parameter    ap_ST_fsm_state39 = 406'd274877906944;
parameter    ap_ST_fsm_state40 = 406'd549755813888;
parameter    ap_ST_fsm_state41 = 406'd1099511627776;
parameter    ap_ST_fsm_state42 = 406'd2199023255552;
parameter    ap_ST_fsm_state43 = 406'd4398046511104;
parameter    ap_ST_fsm_state44 = 406'd8796093022208;
parameter    ap_ST_fsm_state45 = 406'd17592186044416;
parameter    ap_ST_fsm_state46 = 406'd35184372088832;
parameter    ap_ST_fsm_state47 = 406'd70368744177664;
parameter    ap_ST_fsm_state48 = 406'd140737488355328;
parameter    ap_ST_fsm_state49 = 406'd281474976710656;
parameter    ap_ST_fsm_state50 = 406'd562949953421312;
parameter    ap_ST_fsm_state51 = 406'd1125899906842624;
parameter    ap_ST_fsm_state52 = 406'd2251799813685248;
parameter    ap_ST_fsm_state53 = 406'd4503599627370496;
parameter    ap_ST_fsm_state54 = 406'd9007199254740992;
parameter    ap_ST_fsm_state55 = 406'd18014398509481984;
parameter    ap_ST_fsm_state56 = 406'd36028797018963968;
parameter    ap_ST_fsm_state57 = 406'd72057594037927936;
parameter    ap_ST_fsm_state58 = 406'd144115188075855872;
parameter    ap_ST_fsm_state59 = 406'd288230376151711744;
parameter    ap_ST_fsm_state60 = 406'd576460752303423488;
parameter    ap_ST_fsm_state61 = 406'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 406'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 406'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 406'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 406'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 406'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 406'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 406'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 406'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 406'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 406'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 406'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 406'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 406'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 406'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 406'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 406'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 406'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 406'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 406'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 406'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 406'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 406'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 406'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 406'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 406'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 406'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 406'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 406'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 406'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 406'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 406'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 406'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 406'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 406'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 406'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 406'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 406'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 406'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 406'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 406'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 406'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 406'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 406'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 406'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 406'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 406'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 406'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 406'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 406'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 406'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 406'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 406'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 406'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 406'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 406'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 406'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 406'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 406'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 406'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 406'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 406'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 406'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 406'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 406'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 406'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 406'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 406'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 406'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 406'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 406'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 406'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 406'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 406'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 406'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 406'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 406'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_pp0_stage0 = 406'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 406'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 406'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 406'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 406'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 406'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 406'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 406'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 406'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 406'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 406'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state151 = 406'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state152 = 406'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state153 = 406'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state154 = 406'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state155 = 406'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state156 = 406'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state157 = 406'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state158 = 406'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state159 = 406'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state160 = 406'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state161 = 406'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state162 = 406'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state163 = 406'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state164 = 406'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state165 = 406'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state166 = 406'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state167 = 406'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state168 = 406'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state169 = 406'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state170 = 406'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state171 = 406'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state172 = 406'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state173 = 406'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state174 = 406'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state175 = 406'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state176 = 406'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state177 = 406'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state178 = 406'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state179 = 406'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state180 = 406'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state181 = 406'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state182 = 406'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state183 = 406'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state184 = 406'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state185 = 406'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state186 = 406'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state187 = 406'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state188 = 406'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state189 = 406'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state190 = 406'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state191 = 406'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state192 = 406'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state193 = 406'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state194 = 406'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state195 = 406'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state196 = 406'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state197 = 406'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state198 = 406'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state199 = 406'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state200 = 406'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state201 = 406'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state202 = 406'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state203 = 406'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state204 = 406'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state205 = 406'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state206 = 406'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state207 = 406'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state208 = 406'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state209 = 406'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state210 = 406'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state211 = 406'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state212 = 406'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state213 = 406'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state214 = 406'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state215 = 406'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state216 = 406'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state217 = 406'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state218 = 406'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state219 = 406'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state220 = 406'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state221 = 406'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state222 = 406'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state223 = 406'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state224 = 406'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state225 = 406'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state226 = 406'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state227 = 406'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state228 = 406'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state229 = 406'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state230 = 406'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state231 = 406'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state232 = 406'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state233 = 406'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state234 = 406'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state235 = 406'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state236 = 406'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state237 = 406'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state238 = 406'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state239 = 406'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state240 = 406'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state241 = 406'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state242 = 406'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state243 = 406'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state244 = 406'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state245 = 406'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state246 = 406'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state247 = 406'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state248 = 406'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state249 = 406'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state250 = 406'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state251 = 406'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state252 = 406'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state253 = 406'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state254 = 406'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state255 = 406'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state256 = 406'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state257 = 406'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state258 = 406'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state259 = 406'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state260 = 406'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state261 = 406'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state262 = 406'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state263 = 406'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state264 = 406'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state265 = 406'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state266 = 406'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state267 = 406'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state268 = 406'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state269 = 406'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state270 = 406'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state271 = 406'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state272 = 406'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state273 = 406'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state274 = 406'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state275 = 406'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_pp1_stage0 = 406'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state280 = 406'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state281 = 406'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state282 = 406'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state283 = 406'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state284 = 406'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state285 = 406'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state286 = 406'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;
parameter    ap_ST_fsm_state287 = 406'd3885337784451458141838923813647037813284813678104279042503624819477808570410416996352;
parameter    ap_ST_fsm_state288 = 406'd7770675568902916283677847627294075626569627356208558085007249638955617140820833992704;
parameter    ap_ST_fsm_state289 = 406'd15541351137805832567355695254588151253139254712417116170014499277911234281641667985408;
parameter    ap_ST_fsm_state290 = 406'd31082702275611665134711390509176302506278509424834232340028998555822468563283335970816;
parameter    ap_ST_fsm_state291 = 406'd62165404551223330269422781018352605012557018849668464680057997111644937126566671941632;
parameter    ap_ST_fsm_state292 = 406'd124330809102446660538845562036705210025114037699336929360115994223289874253133343883264;
parameter    ap_ST_fsm_state293 = 406'd248661618204893321077691124073410420050228075398673858720231988446579748506266687766528;
parameter    ap_ST_fsm_state294 = 406'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533056;
parameter    ap_ST_fsm_state295 = 406'd994646472819573284310764496293641680200912301594695434880927953786318994025066751066112;
parameter    ap_ST_fsm_state296 = 406'd1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224;
parameter    ap_ST_fsm_state297 = 406'd3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448;
parameter    ap_ST_fsm_state298 = 406'd7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896;
parameter    ap_ST_fsm_state299 = 406'd15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792;
parameter    ap_ST_fsm_state300 = 406'd31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584;
parameter    ap_ST_fsm_state301 = 406'd63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168;
parameter    ap_ST_fsm_state302 = 406'd127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336;
parameter    ap_ST_fsm_state303 = 406'd254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672;
parameter    ap_ST_fsm_state304 = 406'd509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344;
parameter    ap_ST_fsm_state305 = 406'd1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688;
parameter    ap_ST_fsm_state306 = 406'd2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376;
parameter    ap_ST_fsm_state307 = 406'd4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752;
parameter    ap_ST_fsm_state308 = 406'd8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504;
parameter    ap_ST_fsm_state309 = 406'd16296287810675888690147565507275025288411747149327490005089123594835050398106693649467179008;
parameter    ap_ST_fsm_state310 = 406'd32592575621351777380295131014550050576823494298654980010178247189670100796213387298934358016;
parameter    ap_ST_fsm_state311 = 406'd65185151242703554760590262029100101153646988597309960020356494379340201592426774597868716032;
parameter    ap_ST_fsm_state312 = 406'd130370302485407109521180524058200202307293977194619920040712988758680403184853549195737432064;
parameter    ap_ST_fsm_state313 = 406'd260740604970814219042361048116400404614587954389239840081425977517360806369707098391474864128;
parameter    ap_ST_fsm_state314 = 406'd521481209941628438084722096232800809229175908778479680162851955034721612739414196782949728256;
parameter    ap_ST_fsm_state315 = 406'd1042962419883256876169444192465601618458351817556959360325703910069443225478828393565899456512;
parameter    ap_ST_fsm_state316 = 406'd2085924839766513752338888384931203236916703635113918720651407820138886450957656787131798913024;
parameter    ap_ST_fsm_state317 = 406'd4171849679533027504677776769862406473833407270227837441302815640277772901915313574263597826048;
parameter    ap_ST_fsm_state318 = 406'd8343699359066055009355553539724812947666814540455674882605631280555545803830627148527195652096;
parameter    ap_ST_fsm_state319 = 406'd16687398718132110018711107079449625895333629080911349765211262561111091607661254297054391304192;
parameter    ap_ST_fsm_state320 = 406'd33374797436264220037422214158899251790667258161822699530422525122222183215322508594108782608384;
parameter    ap_ST_fsm_state321 = 406'd66749594872528440074844428317798503581334516323645399060845050244444366430645017188217565216768;
parameter    ap_ST_fsm_state322 = 406'd133499189745056880149688856635597007162669032647290798121690100488888732861290034376435130433536;
parameter    ap_ST_fsm_state323 = 406'd266998379490113760299377713271194014325338065294581596243380200977777465722580068752870260867072;
parameter    ap_ST_fsm_state324 = 406'd533996758980227520598755426542388028650676130589163192486760401955554931445160137505740521734144;
parameter    ap_ST_fsm_state325 = 406'd1067993517960455041197510853084776057301352261178326384973520803911109862890320275011481043468288;
parameter    ap_ST_fsm_state326 = 406'd2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936576;
parameter    ap_ST_fsm_state327 = 406'd4271974071841820164790043412339104229205409044713305539894083215644439451561281100045924173873152;
parameter    ap_ST_fsm_state328 = 406'd8543948143683640329580086824678208458410818089426611079788166431288878903122562200091848347746304;
parameter    ap_ST_fsm_state329 = 406'd17087896287367280659160173649356416916821636178853222159576332862577757806245124400183696695492608;
parameter    ap_ST_fsm_state330 = 406'd34175792574734561318320347298712833833643272357706444319152665725155515612490248800367393390985216;
parameter    ap_ST_fsm_state331 = 406'd68351585149469122636640694597425667667286544715412888638305331450311031224980497600734786781970432;
parameter    ap_ST_fsm_state332 = 406'd136703170298938245273281389194851335334573089430825777276610662900622062449960995201469573563940864;
parameter    ap_ST_fsm_state333 = 406'd273406340597876490546562778389702670669146178861651554553221325801244124899921990402939147127881728;
parameter    ap_ST_fsm_state334 = 406'd546812681195752981093125556779405341338292357723303109106442651602488249799843980805878294255763456;
parameter    ap_ST_fsm_state335 = 406'd1093625362391505962186251113558810682676584715446606218212885303204976499599687961611756588511526912;
parameter    ap_ST_fsm_state336 = 406'd2187250724783011924372502227117621365353169430893212436425770606409952999199375923223513177023053824;
parameter    ap_ST_fsm_state337 = 406'd4374501449566023848745004454235242730706338861786424872851541212819905998398751846447026354046107648;
parameter    ap_ST_fsm_state338 = 406'd8749002899132047697490008908470485461412677723572849745703082425639811996797503692894052708092215296;
parameter    ap_ST_fsm_state339 = 406'd17498005798264095394980017816940970922825355447145699491406164851279623993595007385788105416184430592;
parameter    ap_ST_fsm_state340 = 406'd34996011596528190789960035633881941845650710894291398982812329702559247987190014771576210832368861184;
parameter    ap_ST_fsm_state341 = 406'd69992023193056381579920071267763883691301421788582797965624659405118495974380029543152421664737722368;
parameter    ap_ST_fsm_state342 = 406'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444736;
parameter    ap_ST_fsm_state343 = 406'd279968092772225526319680285071055534765205687154331191862498637620473983897520118172609686658950889472;
parameter    ap_ST_fsm_state344 = 406'd559936185544451052639360570142111069530411374308662383724997275240947967795040236345219373317901778944;
parameter    ap_ST_fsm_state345 = 406'd1119872371088902105278721140284222139060822748617324767449994550481895935590080472690438746635803557888;
parameter    ap_ST_fsm_state346 = 406'd2239744742177804210557442280568444278121645497234649534899989100963791871180160945380877493271607115776;
parameter    ap_ST_fsm_state347 = 406'd4479489484355608421114884561136888556243290994469299069799978201927583742360321890761754986543214231552;
parameter    ap_ST_fsm_state348 = 406'd8958978968711216842229769122273777112486581988938598139599956403855167484720643781523509973086428463104;
parameter    ap_ST_fsm_state349 = 406'd17917957937422433684459538244547554224973163977877196279199912807710334969441287563047019946172856926208;
parameter    ap_ST_fsm_state350 = 406'd35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852416;
parameter    ap_ST_fsm_state351 = 406'd71671831749689734737838152978190216899892655911508785116799651230841339877765150252188079784691427704832;
parameter    ap_ST_fsm_state352 = 406'd143343663499379469475676305956380433799785311823017570233599302461682679755530300504376159569382855409664;
parameter    ap_ST_fsm_state353 = 406'd286687326998758938951352611912760867599570623646035140467198604923365359511060601008752319138765710819328;
parameter    ap_ST_fsm_state354 = 406'd573374653997517877902705223825521735199141247292070280934397209846730719022121202017504638277531421638656;
parameter    ap_ST_fsm_state355 = 406'd1146749307995035755805410447651043470398282494584140561868794419693461438044242404035009276555062843277312;
parameter    ap_ST_fsm_state356 = 406'd2293498615990071511610820895302086940796564989168281123737588839386922876088484808070018553110125686554624;
parameter    ap_ST_fsm_state357 = 406'd4586997231980143023221641790604173881593129978336562247475177678773845752176969616140037106220251373109248;
parameter    ap_ST_fsm_state358 = 406'd9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496;
parameter    ap_ST_fsm_state359 = 406'd18347988927920572092886567162416695526372519913346248989900710715095383008707878464560148424881005492436992;
parameter    ap_ST_fsm_state360 = 406'd36695977855841144185773134324833391052745039826692497979801421430190766017415756929120296849762010984873984;
parameter    ap_ST_fsm_state361 = 406'd73391955711682288371546268649666782105490079653384995959602842860381532034831513858240593699524021969747968;
parameter    ap_ST_fsm_state362 = 406'd146783911423364576743092537299333564210980159306769991919205685720763064069663027716481187399048043939495936;
parameter    ap_ST_fsm_state363 = 406'd293567822846729153486185074598667128421960318613539983838411371441526128139326055432962374798096087878991872;
parameter    ap_ST_fsm_state364 = 406'd587135645693458306972370149197334256843920637227079967676822742883052256278652110865924749596192175757983744;
parameter    ap_ST_fsm_state365 = 406'd1174271291386916613944740298394668513687841274454159935353645485766104512557304221731849499192384351515967488;
parameter    ap_ST_fsm_state366 = 406'd2348542582773833227889480596789337027375682548908319870707290971532209025114608443463698998384768703031934976;
parameter    ap_ST_fsm_state367 = 406'd4697085165547666455778961193578674054751365097816639741414581943064418050229216886927397996769537406063869952;
parameter    ap_ST_fsm_state368 = 406'd9394170331095332911557922387157348109502730195633279482829163886128836100458433773854795993539074812127739904;
parameter    ap_ST_fsm_state369 = 406'd18788340662190665823115844774314696219005460391266558965658327772257672200916867547709591987078149624255479808;
parameter    ap_ST_fsm_state370 = 406'd37576681324381331646231689548629392438010920782533117931316655544515344401833735095419183974156299248510959616;
parameter    ap_ST_fsm_state371 = 406'd75153362648762663292463379097258784876021841565066235862633311089030688803667470190838367948312598497021919232;
parameter    ap_ST_fsm_state372 = 406'd150306725297525326584926758194517569752043683130132471725266622178061377607334940381676735896625196994043838464;
parameter    ap_ST_fsm_state373 = 406'd300613450595050653169853516389035139504087366260264943450533244356122755214669880763353471793250393988087676928;
parameter    ap_ST_fsm_state374 = 406'd601226901190101306339707032778070279008174732520529886901066488712245510429339761526706943586500787976175353856;
parameter    ap_ST_fsm_state375 = 406'd1202453802380202612679414065556140558016349465041059773802132977424491020858679523053413887173001575952350707712;
parameter    ap_ST_fsm_state376 = 406'd2404907604760405225358828131112281116032698930082119547604265954848982041717359046106827774346003151904701415424;
parameter    ap_ST_fsm_state377 = 406'd4809815209520810450717656262224562232065397860164239095208531909697964083434718092213655548692006303809402830848;
parameter    ap_ST_fsm_state378 = 406'd9619630419041620901435312524449124464130795720328478190417063819395928166869436184427311097384012607618805661696;
parameter    ap_ST_fsm_state379 = 406'd19239260838083241802870625048898248928261591440656956380834127638791856333738872368854622194768025215237611323392;
parameter    ap_ST_fsm_state380 = 406'd38478521676166483605741250097796497856523182881313912761668255277583712667477744737709244389536050430475222646784;
parameter    ap_ST_fsm_state381 = 406'd76957043352332967211482500195592995713046365762627825523336510555167425334955489475418488779072100860950445293568;
parameter    ap_ST_fsm_state382 = 406'd153914086704665934422965000391185991426092731525255651046673021110334850669910978950836977558144201721900890587136;
parameter    ap_ST_fsm_state383 = 406'd307828173409331868845930000782371982852185463050511302093346042220669701339821957901673955116288403443801781174272;
parameter    ap_ST_fsm_state384 = 406'd615656346818663737691860001564743965704370926101022604186692084441339402679643915803347910232576806887603562348544;
parameter    ap_ST_fsm_state385 = 406'd1231312693637327475383720003129487931408741852202045208373384168882678805359287831606695820465153613775207124697088;
parameter    ap_ST_fsm_state386 = 406'd2462625387274654950767440006258975862817483704404090416746768337765357610718575663213391640930307227550414249394176;
parameter    ap_ST_fsm_state387 = 406'd4925250774549309901534880012517951725634967408808180833493536675530715221437151326426783281860614455100828498788352;
parameter    ap_ST_fsm_state388 = 406'd9850501549098619803069760025035903451269934817616361666987073351061430442874302652853566563721228910201656997576704;
parameter    ap_ST_fsm_state389 = 406'd19701003098197239606139520050071806902539869635232723333974146702122860885748605305707133127442457820403313995153408;
parameter    ap_ST_fsm_state390 = 406'd39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306816;
parameter    ap_ST_fsm_state391 = 406'd78804012392788958424558080200287227610159478540930893335896586808491443542994421222828532509769831281613255980613632;
parameter    ap_ST_fsm_state392 = 406'd157608024785577916849116160400574455220318957081861786671793173616982887085988842445657065019539662563226511961227264;
parameter    ap_ST_fsm_state393 = 406'd315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528;
parameter    ap_ST_fsm_state394 = 406'd630432099142311667396464641602297820881275828327447146687172694467931548343955369782628260078158650252906047844909056;
parameter    ap_ST_fsm_state395 = 406'd1260864198284623334792929283204595641762551656654894293374345388935863096687910739565256520156317300505812095689818112;
parameter    ap_ST_fsm_state396 = 406'd2521728396569246669585858566409191283525103313309788586748690777871726193375821479130513040312634601011624191379636224;
parameter    ap_ST_fsm_state397 = 406'd5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448;
parameter    ap_ST_fsm_state398 = 406'd10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896;
parameter    ap_ST_fsm_state399 = 406'd20173827172553973356686868531273530268200826506478308693989526222973809547006571833044104322501076808092993531037089792;
parameter    ap_ST_fsm_state400 = 406'd40347654345107946713373737062547060536401653012956617387979052445947619094013143666088208645002153616185987062074179584;
parameter    ap_ST_fsm_state401 = 406'd80695308690215893426747474125094121072803306025913234775958104891895238188026287332176417290004307232371974124148359168;
parameter    ap_ST_fsm_state402 = 406'd161390617380431786853494948250188242145606612051826469551916209783790476376052574664352834580008614464743948248296718336;
parameter    ap_ST_fsm_state403 = 406'd322781234760863573706989896500376484291213224103652939103832419567580952752105149328705669160017228929487896496593436672;
parameter    ap_ST_fsm_state404 = 406'd645562469521727147413979793000752968582426448207305878207664839135161905504210298657411338320034457858975792993186873344;
parameter    ap_ST_fsm_state405 = 406'd1291124939043454294827959586001505937164852896414611756415329678270323811008420597314822676640068915717951585986373746688;
parameter    ap_ST_fsm_state406 = 406'd2582249878086908589655919172003011874329705792829223512830659356540647622016841194629645353280137831435903171972747493376;
parameter    ap_ST_fsm_state407 = 406'd5164499756173817179311838344006023748659411585658447025661318713081295244033682389259290706560275662871806343945494986752;
parameter    ap_ST_fsm_state408 = 406'd10328999512347634358623676688012047497318823171316894051322637426162590488067364778518581413120551325743612687890989973504;
parameter    ap_ST_fsm_state409 = 406'd20657999024695268717247353376024094994637646342633788102645274852325180976134729557037162826241102651487225375781979947008;
parameter    ap_ST_fsm_state410 = 406'd41315998049390537434494706752048189989275292685267576205290549704650361952269459114074325652482205302974450751563959894016;
parameter    ap_ST_fsm_state411 = 406'd82631996098781074868989413504096379978550585370535152410581099409300723904538918228148651304964410605948901503127919788032;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_TARGET_ADDR = 0;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [405:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] a;
wire   [63:0] b;
wire   [63:0] c;
wire   [31:0] n_elements;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state4;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_7_reg_494;
wire    ap_CS_fsm_state142;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_3_reg_520;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state411;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state275;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] ap_reg_pp1_iter2_tmp_3_reg_520;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] j_0_reg2mem23_0_i_i_reg_192;
reg   [30:0] ap_reg_pp0_iter1_j_0_reg2mem23_0_i_i_reg_192;
wire    ap_block_state138_pp0_stage0_iter0;
reg    ap_block_state139_pp0_stage0_iter1;
wire    ap_block_state140_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [30:0] j1_0_reg2mem21_0_i_i_reg_204;
reg   [61:0] tmp_reg_422;
reg   [61:0] tmp_1_reg_427;
reg   [61:0] tmp_2_reg_432;
reg   [31:0] arg_n_elements_reg_437;
wire   [63:0] tmp_4_fu_245_p1;
reg   [63:0] tmp_4_reg_445;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_8_fu_248_p1;
reg   [63:0] tmp_8_reg_450;
wire   [63:0] tmp_9_fu_251_p1;
reg   [63:0] tmp_9_reg_455;
wire   [31:0] tmp_18_fu_306_p3;
reg   [31:0] tmp_18_reg_460;
wire   [31:0] tmp_5_fu_319_p2;
reg   [31:0] tmp_5_reg_468;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_21_fu_314_p2;
wire   [31:0] size_0_reg2mem25_0_i_i_fu_335_p3;
reg   [31:0] size_0_reg2mem25_0_i_i_reg_473;
wire  signed [63:0] tmp_16_fu_343_p1;
reg  signed [63:0] tmp_16_reg_482;
reg   [63:0] gmem_addr_reg_488;
wire   [0:0] tmp_7_fu_362_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_7_reg_494;
wire   [30:0] p_reg2mem7_0_i_i_fu_367_p2;
reg   [30:0] p_reg2mem7_0_i_i_reg_498;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem_addr_read_reg_503;
reg   [63:0] gmem_addr_1_reg_508;
wire    ap_CS_fsm_state141;
reg   [63:0] gmem_addr_2_reg_514;
wire   [0:0] tmp_3_fu_402_p2;
wire    ap_block_state276_pp1_stage0_iter0;
reg    ap_block_state277_pp1_stage0_iter1;
wire    ap_block_state278_pp1_stage0_iter2;
wire    ap_block_state279_pp1_stage0_iter3;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state279_io;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_tmp_3_reg_520;
wire   [30:0] p_reg2mem1_0_i_i_fu_407_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] arrayA_q0;
reg   [31:0] arrayA_load_reg_534;
reg   [31:0] gmem_addr_1_read_reg_539;
wire   [31:0] tmp_13_fu_418_p2;
reg   [31:0] tmp_13_reg_544;
wire    ap_CS_fsm_state137;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state138;
reg    ap_enable_reg_pp0_iter2;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state276;
reg    ap_enable_reg_pp1_iter2;
reg   [7:0] arrayA_address0;
reg    arrayA_ce0;
reg    arrayA_we0;
reg   [31:0] i_0_reg2mem27_0_i_i_reg_181;
reg   [30:0] j_0_reg2mem23_0_i_i_phi_fu_196_p4;
wire   [63:0] tmp_s_fu_373_p1;
wire   [63:0] tmp_10_fu_413_p1;
wire   [63:0] tmp_17_fu_347_p2;
wire   [63:0] tmp_19_fu_378_p2;
wire   [63:0] tmp_20_fu_382_p2;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] tmp_11_fu_254_p2;
wire   [31:0] p_neg_fu_267_p2;
wire   [23:0] p_lshr_fu_272_p4;
wire   [0:0] tmp_12_fu_259_p3;
wire   [23:0] p_neg_t_fu_282_p2;
wire   [23:0] tmp_14_fu_288_p4;
wire   [23:0] tmp_15_fu_298_p3;
wire   [0:0] tmp_6_fu_325_p2;
wire   [31:0] p_reg2mem13_0_i_i_fu_330_p2;
wire   [31:0] j_0_reg2mem23_0_i_i_cast_fu_358_p1;
wire   [31:0] j1_0_reg2mem21_0_i_i_cast_fu_398_p1;
reg   [405:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 406'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

krnl_vadd_rtl_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
krnl_vadd_rtl_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .b(b),
    .c(c),
    .n_elements(n_elements)
);

krnl_vadd_rtl_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 133 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_GMEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
krnl_vadd_rtl_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(size_0_reg2mem25_0_i_i_reg_473),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_2_reg_514),
    .I_AWID(1'd0),
    .I_AWLEN(size_0_reg2mem25_0_i_i_reg_473),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(tmp_13_reg_544),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

krnl_vadd_rtl_arrayA #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
arrayA_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(arrayA_address0),
    .ce0(arrayA_ce0),
    .we0(arrayA_we0),
    .d0(gmem_addr_read_reg_503),
    .q0(arrayA_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state138))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state137)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state138)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state138 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state137)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state276))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state275) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state276)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state276 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((1'b1 == ap_CS_fsm_state275) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state142) & (ap_sig_ioackin_gmem_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state142) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state275)) begin
            if ((ap_sig_ioackin_gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp1_iter3) & (1'd1 == ap_reg_pp1_iter2_tmp_3_reg_520))) begin
            if ((ap_block_pp1_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if (((1'b1 == gmem_WREADY) & (ap_block_pp1_stage0_01001 == 1'b0))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state411) & (gmem_BVALID == 1'b1))) begin
        i_0_reg2mem27_0_i_i_reg_181 <= tmp_5_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_reg2mem27_0_i_i_reg_181 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state275) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
        j1_0_reg2mem21_0_i_i_reg_204 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd1 == tmp_3_fu_402_p2))) begin
        j1_0_reg2mem21_0_i_i_reg_204 <= p_reg2mem1_0_i_i_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_7_reg_494 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        j_0_reg2mem23_0_i_i_reg_192 <= p_reg2mem7_0_i_i_reg_498;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        j_0_reg2mem23_0_i_i_reg_192 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_j_0_reg2mem23_0_i_i_reg_192 <= j_0_reg2mem23_0_i_i_reg_192;
        ap_reg_pp0_iter1_tmp_7_reg_494 <= tmp_7_reg_494;
        tmp_7_reg_494 <= tmp_7_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        ap_reg_pp1_iter1_tmp_3_reg_520 <= tmp_3_reg_520;
        tmp_3_reg_520 <= tmp_3_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp1_stage0_11001 == 1'b0)) begin
        ap_reg_pp1_iter2_tmp_3_reg_520 <= ap_reg_pp1_iter1_tmp_3_reg_520;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        arg_n_elements_reg_437 <= n_elements;
        tmp_1_reg_427 <= {{b[63:2]}};
        tmp_2_reg_432 <= {{c[63:2]}};
        tmp_reg_422 <= {{a[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd1 == tmp_3_reg_520) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        arrayA_load_reg_534 <= arrayA_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'd1 == tmp_3_reg_520) & (ap_block_pp1_stage0_11001 == 1'b0))) begin
        gmem_addr_1_read_reg_539 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        gmem_addr_1_reg_508 <= tmp_19_fu_378_p2;
        gmem_addr_2_reg_514 <= tmp_20_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_494 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        gmem_addr_read_reg_503 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_21_fu_314_p2 == 1'd0))) begin
        gmem_addr_reg_488 <= tmp_17_fu_347_p2;
        size_0_reg2mem25_0_i_i_reg_473 <= size_0_reg2mem25_0_i_i_fu_335_p3;
        tmp_16_reg_482 <= tmp_16_fu_343_p1;
        tmp_5_reg_468 <= tmp_5_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        p_reg2mem7_0_i_i_reg_498 <= p_reg2mem7_0_i_i_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp1_iter1_tmp_3_reg_520))) begin
        tmp_13_reg_544 <= tmp_13_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_18_reg_460[31 : 8] <= tmp_18_fu_306_p3[31 : 8];
        tmp_4_reg_445[61 : 0] <= tmp_4_fu_245_p1[61 : 0];
        tmp_8_reg_450[61 : 0] <= tmp_8_fu_248_p1[61 : 0];
        tmp_9_reg_455[61 : 0] <= tmp_9_fu_251_p1[61 : 0];
    end
end

always @ (*) begin
    if ((1'd0 == tmp_7_fu_362_p2)) begin
        ap_condition_pp0_exit_iter0_state138 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state138 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_3_fu_402_p2)) begin
        ap_condition_pp1_exit_iter0_state276 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state276 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_21_fu_314_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2) & (1'b0 == ap_enable_reg_pp1_iter3))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_21_fu_314_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
        arrayA_address0 = tmp_10_fu_413_p1;
    end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        arrayA_address0 = tmp_s_fu_373_p1;
    end else begin
        arrayA_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0)) | ((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        arrayA_ce0 = 1'b1;
    end else begin
        arrayA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_7_reg_494))) begin
        arrayA_we0 = 1'b1;
    end else begin
        arrayA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state142)) begin
            gmem_ARADDR = gmem_addr_1_reg_508;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            gmem_ARADDR = gmem_addr_reg_488;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_state142) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state275) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state411) & (gmem_BVALID == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd1 == tmp_3_reg_520) & (ap_block_pp1_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_7_reg_494 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter3) & (1'd1 == ap_reg_pp1_iter2_tmp_3_reg_520) & (ap_block_pp1_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state142))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state275)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state411)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (tmp_7_reg_494 == 1'd1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (ap_block_pp1_stage0 == 1'b0) & (1'd1 == tmp_3_reg_520)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (1'd1 == ap_reg_pp1_iter2_tmp_3_reg_520))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (tmp_7_reg_494 == 1'd1))) begin
        j_0_reg2mem23_0_i_i_phi_fu_196_p4 = p_reg2mem7_0_i_i_reg_498;
    end else begin
        j_0_reg2mem23_0_i_i_phi_fu_196_p4 = j_0_reg2mem23_0_i_i_reg_192;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_21_fu_314_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd0 == tmp_7_fu_362_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd0 == tmp_7_fu_362_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            if (((1'b1 == ap_CS_fsm_state142) & (ap_sig_ioackin_gmem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            ap_NS_fsm = ap_ST_fsm_state272;
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            if (((1'b1 == ap_CS_fsm_state275) & (ap_sig_ioackin_gmem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state275;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp1_iter3) & (ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'd0 == tmp_3_fu_402_p2) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp1_iter3) & (ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'd0 == tmp_3_fu_402_p2) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state280;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state282;
        end
        ap_ST_fsm_state282 : begin
            ap_NS_fsm = ap_ST_fsm_state283;
        end
        ap_ST_fsm_state283 : begin
            ap_NS_fsm = ap_ST_fsm_state284;
        end
        ap_ST_fsm_state284 : begin
            ap_NS_fsm = ap_ST_fsm_state285;
        end
        ap_ST_fsm_state285 : begin
            ap_NS_fsm = ap_ST_fsm_state286;
        end
        ap_ST_fsm_state286 : begin
            ap_NS_fsm = ap_ST_fsm_state287;
        end
        ap_ST_fsm_state287 : begin
            ap_NS_fsm = ap_ST_fsm_state288;
        end
        ap_ST_fsm_state288 : begin
            ap_NS_fsm = ap_ST_fsm_state289;
        end
        ap_ST_fsm_state289 : begin
            ap_NS_fsm = ap_ST_fsm_state290;
        end
        ap_ST_fsm_state290 : begin
            ap_NS_fsm = ap_ST_fsm_state291;
        end
        ap_ST_fsm_state291 : begin
            ap_NS_fsm = ap_ST_fsm_state292;
        end
        ap_ST_fsm_state292 : begin
            ap_NS_fsm = ap_ST_fsm_state293;
        end
        ap_ST_fsm_state293 : begin
            ap_NS_fsm = ap_ST_fsm_state294;
        end
        ap_ST_fsm_state294 : begin
            ap_NS_fsm = ap_ST_fsm_state295;
        end
        ap_ST_fsm_state295 : begin
            ap_NS_fsm = ap_ST_fsm_state296;
        end
        ap_ST_fsm_state296 : begin
            ap_NS_fsm = ap_ST_fsm_state297;
        end
        ap_ST_fsm_state297 : begin
            ap_NS_fsm = ap_ST_fsm_state298;
        end
        ap_ST_fsm_state298 : begin
            ap_NS_fsm = ap_ST_fsm_state299;
        end
        ap_ST_fsm_state299 : begin
            ap_NS_fsm = ap_ST_fsm_state300;
        end
        ap_ST_fsm_state300 : begin
            ap_NS_fsm = ap_ST_fsm_state301;
        end
        ap_ST_fsm_state301 : begin
            ap_NS_fsm = ap_ST_fsm_state302;
        end
        ap_ST_fsm_state302 : begin
            ap_NS_fsm = ap_ST_fsm_state303;
        end
        ap_ST_fsm_state303 : begin
            ap_NS_fsm = ap_ST_fsm_state304;
        end
        ap_ST_fsm_state304 : begin
            ap_NS_fsm = ap_ST_fsm_state305;
        end
        ap_ST_fsm_state305 : begin
            ap_NS_fsm = ap_ST_fsm_state306;
        end
        ap_ST_fsm_state306 : begin
            ap_NS_fsm = ap_ST_fsm_state307;
        end
        ap_ST_fsm_state307 : begin
            ap_NS_fsm = ap_ST_fsm_state308;
        end
        ap_ST_fsm_state308 : begin
            ap_NS_fsm = ap_ST_fsm_state309;
        end
        ap_ST_fsm_state309 : begin
            ap_NS_fsm = ap_ST_fsm_state310;
        end
        ap_ST_fsm_state310 : begin
            ap_NS_fsm = ap_ST_fsm_state311;
        end
        ap_ST_fsm_state311 : begin
            ap_NS_fsm = ap_ST_fsm_state312;
        end
        ap_ST_fsm_state312 : begin
            ap_NS_fsm = ap_ST_fsm_state313;
        end
        ap_ST_fsm_state313 : begin
            ap_NS_fsm = ap_ST_fsm_state314;
        end
        ap_ST_fsm_state314 : begin
            ap_NS_fsm = ap_ST_fsm_state315;
        end
        ap_ST_fsm_state315 : begin
            ap_NS_fsm = ap_ST_fsm_state316;
        end
        ap_ST_fsm_state316 : begin
            ap_NS_fsm = ap_ST_fsm_state317;
        end
        ap_ST_fsm_state317 : begin
            ap_NS_fsm = ap_ST_fsm_state318;
        end
        ap_ST_fsm_state318 : begin
            ap_NS_fsm = ap_ST_fsm_state319;
        end
        ap_ST_fsm_state319 : begin
            ap_NS_fsm = ap_ST_fsm_state320;
        end
        ap_ST_fsm_state320 : begin
            ap_NS_fsm = ap_ST_fsm_state321;
        end
        ap_ST_fsm_state321 : begin
            ap_NS_fsm = ap_ST_fsm_state322;
        end
        ap_ST_fsm_state322 : begin
            ap_NS_fsm = ap_ST_fsm_state323;
        end
        ap_ST_fsm_state323 : begin
            ap_NS_fsm = ap_ST_fsm_state324;
        end
        ap_ST_fsm_state324 : begin
            ap_NS_fsm = ap_ST_fsm_state325;
        end
        ap_ST_fsm_state325 : begin
            ap_NS_fsm = ap_ST_fsm_state326;
        end
        ap_ST_fsm_state326 : begin
            ap_NS_fsm = ap_ST_fsm_state327;
        end
        ap_ST_fsm_state327 : begin
            ap_NS_fsm = ap_ST_fsm_state328;
        end
        ap_ST_fsm_state328 : begin
            ap_NS_fsm = ap_ST_fsm_state329;
        end
        ap_ST_fsm_state329 : begin
            ap_NS_fsm = ap_ST_fsm_state330;
        end
        ap_ST_fsm_state330 : begin
            ap_NS_fsm = ap_ST_fsm_state331;
        end
        ap_ST_fsm_state331 : begin
            ap_NS_fsm = ap_ST_fsm_state332;
        end
        ap_ST_fsm_state332 : begin
            ap_NS_fsm = ap_ST_fsm_state333;
        end
        ap_ST_fsm_state333 : begin
            ap_NS_fsm = ap_ST_fsm_state334;
        end
        ap_ST_fsm_state334 : begin
            ap_NS_fsm = ap_ST_fsm_state335;
        end
        ap_ST_fsm_state335 : begin
            ap_NS_fsm = ap_ST_fsm_state336;
        end
        ap_ST_fsm_state336 : begin
            ap_NS_fsm = ap_ST_fsm_state337;
        end
        ap_ST_fsm_state337 : begin
            ap_NS_fsm = ap_ST_fsm_state338;
        end
        ap_ST_fsm_state338 : begin
            ap_NS_fsm = ap_ST_fsm_state339;
        end
        ap_ST_fsm_state339 : begin
            ap_NS_fsm = ap_ST_fsm_state340;
        end
        ap_ST_fsm_state340 : begin
            ap_NS_fsm = ap_ST_fsm_state341;
        end
        ap_ST_fsm_state341 : begin
            ap_NS_fsm = ap_ST_fsm_state342;
        end
        ap_ST_fsm_state342 : begin
            ap_NS_fsm = ap_ST_fsm_state343;
        end
        ap_ST_fsm_state343 : begin
            ap_NS_fsm = ap_ST_fsm_state344;
        end
        ap_ST_fsm_state344 : begin
            ap_NS_fsm = ap_ST_fsm_state345;
        end
        ap_ST_fsm_state345 : begin
            ap_NS_fsm = ap_ST_fsm_state346;
        end
        ap_ST_fsm_state346 : begin
            ap_NS_fsm = ap_ST_fsm_state347;
        end
        ap_ST_fsm_state347 : begin
            ap_NS_fsm = ap_ST_fsm_state348;
        end
        ap_ST_fsm_state348 : begin
            ap_NS_fsm = ap_ST_fsm_state349;
        end
        ap_ST_fsm_state349 : begin
            ap_NS_fsm = ap_ST_fsm_state350;
        end
        ap_ST_fsm_state350 : begin
            ap_NS_fsm = ap_ST_fsm_state351;
        end
        ap_ST_fsm_state351 : begin
            ap_NS_fsm = ap_ST_fsm_state352;
        end
        ap_ST_fsm_state352 : begin
            ap_NS_fsm = ap_ST_fsm_state353;
        end
        ap_ST_fsm_state353 : begin
            ap_NS_fsm = ap_ST_fsm_state354;
        end
        ap_ST_fsm_state354 : begin
            ap_NS_fsm = ap_ST_fsm_state355;
        end
        ap_ST_fsm_state355 : begin
            ap_NS_fsm = ap_ST_fsm_state356;
        end
        ap_ST_fsm_state356 : begin
            ap_NS_fsm = ap_ST_fsm_state357;
        end
        ap_ST_fsm_state357 : begin
            ap_NS_fsm = ap_ST_fsm_state358;
        end
        ap_ST_fsm_state358 : begin
            ap_NS_fsm = ap_ST_fsm_state359;
        end
        ap_ST_fsm_state359 : begin
            ap_NS_fsm = ap_ST_fsm_state360;
        end
        ap_ST_fsm_state360 : begin
            ap_NS_fsm = ap_ST_fsm_state361;
        end
        ap_ST_fsm_state361 : begin
            ap_NS_fsm = ap_ST_fsm_state362;
        end
        ap_ST_fsm_state362 : begin
            ap_NS_fsm = ap_ST_fsm_state363;
        end
        ap_ST_fsm_state363 : begin
            ap_NS_fsm = ap_ST_fsm_state364;
        end
        ap_ST_fsm_state364 : begin
            ap_NS_fsm = ap_ST_fsm_state365;
        end
        ap_ST_fsm_state365 : begin
            ap_NS_fsm = ap_ST_fsm_state366;
        end
        ap_ST_fsm_state366 : begin
            ap_NS_fsm = ap_ST_fsm_state367;
        end
        ap_ST_fsm_state367 : begin
            ap_NS_fsm = ap_ST_fsm_state368;
        end
        ap_ST_fsm_state368 : begin
            ap_NS_fsm = ap_ST_fsm_state369;
        end
        ap_ST_fsm_state369 : begin
            ap_NS_fsm = ap_ST_fsm_state370;
        end
        ap_ST_fsm_state370 : begin
            ap_NS_fsm = ap_ST_fsm_state371;
        end
        ap_ST_fsm_state371 : begin
            ap_NS_fsm = ap_ST_fsm_state372;
        end
        ap_ST_fsm_state372 : begin
            ap_NS_fsm = ap_ST_fsm_state373;
        end
        ap_ST_fsm_state373 : begin
            ap_NS_fsm = ap_ST_fsm_state374;
        end
        ap_ST_fsm_state374 : begin
            ap_NS_fsm = ap_ST_fsm_state375;
        end
        ap_ST_fsm_state375 : begin
            ap_NS_fsm = ap_ST_fsm_state376;
        end
        ap_ST_fsm_state376 : begin
            ap_NS_fsm = ap_ST_fsm_state377;
        end
        ap_ST_fsm_state377 : begin
            ap_NS_fsm = ap_ST_fsm_state378;
        end
        ap_ST_fsm_state378 : begin
            ap_NS_fsm = ap_ST_fsm_state379;
        end
        ap_ST_fsm_state379 : begin
            ap_NS_fsm = ap_ST_fsm_state380;
        end
        ap_ST_fsm_state380 : begin
            ap_NS_fsm = ap_ST_fsm_state381;
        end
        ap_ST_fsm_state381 : begin
            ap_NS_fsm = ap_ST_fsm_state382;
        end
        ap_ST_fsm_state382 : begin
            ap_NS_fsm = ap_ST_fsm_state383;
        end
        ap_ST_fsm_state383 : begin
            ap_NS_fsm = ap_ST_fsm_state384;
        end
        ap_ST_fsm_state384 : begin
            ap_NS_fsm = ap_ST_fsm_state385;
        end
        ap_ST_fsm_state385 : begin
            ap_NS_fsm = ap_ST_fsm_state386;
        end
        ap_ST_fsm_state386 : begin
            ap_NS_fsm = ap_ST_fsm_state387;
        end
        ap_ST_fsm_state387 : begin
            ap_NS_fsm = ap_ST_fsm_state388;
        end
        ap_ST_fsm_state388 : begin
            ap_NS_fsm = ap_ST_fsm_state389;
        end
        ap_ST_fsm_state389 : begin
            ap_NS_fsm = ap_ST_fsm_state390;
        end
        ap_ST_fsm_state390 : begin
            ap_NS_fsm = ap_ST_fsm_state391;
        end
        ap_ST_fsm_state391 : begin
            ap_NS_fsm = ap_ST_fsm_state392;
        end
        ap_ST_fsm_state392 : begin
            ap_NS_fsm = ap_ST_fsm_state393;
        end
        ap_ST_fsm_state393 : begin
            ap_NS_fsm = ap_ST_fsm_state394;
        end
        ap_ST_fsm_state394 : begin
            ap_NS_fsm = ap_ST_fsm_state395;
        end
        ap_ST_fsm_state395 : begin
            ap_NS_fsm = ap_ST_fsm_state396;
        end
        ap_ST_fsm_state396 : begin
            ap_NS_fsm = ap_ST_fsm_state397;
        end
        ap_ST_fsm_state397 : begin
            ap_NS_fsm = ap_ST_fsm_state398;
        end
        ap_ST_fsm_state398 : begin
            ap_NS_fsm = ap_ST_fsm_state399;
        end
        ap_ST_fsm_state399 : begin
            ap_NS_fsm = ap_ST_fsm_state400;
        end
        ap_ST_fsm_state400 : begin
            ap_NS_fsm = ap_ST_fsm_state401;
        end
        ap_ST_fsm_state401 : begin
            ap_NS_fsm = ap_ST_fsm_state402;
        end
        ap_ST_fsm_state402 : begin
            ap_NS_fsm = ap_ST_fsm_state403;
        end
        ap_ST_fsm_state403 : begin
            ap_NS_fsm = ap_ST_fsm_state404;
        end
        ap_ST_fsm_state404 : begin
            ap_NS_fsm = ap_ST_fsm_state405;
        end
        ap_ST_fsm_state405 : begin
            ap_NS_fsm = ap_ST_fsm_state406;
        end
        ap_ST_fsm_state406 : begin
            ap_NS_fsm = ap_ST_fsm_state407;
        end
        ap_ST_fsm_state407 : begin
            ap_NS_fsm = ap_ST_fsm_state408;
        end
        ap_ST_fsm_state408 : begin
            ap_NS_fsm = ap_ST_fsm_state409;
        end
        ap_ST_fsm_state409 : begin
            ap_NS_fsm = ap_ST_fsm_state410;
        end
        ap_ST_fsm_state410 : begin
            ap_NS_fsm = ap_ST_fsm_state411;
        end
        ap_ST_fsm_state411 : begin
            if (((1'b1 == ap_CS_fsm_state411) & (gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state411;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd273];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state275 = ap_CS_fsm[32'd272];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state411 = ap_CS_fsm[32'd405];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_7_reg_494 == 1'd1) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_7_reg_494 == 1'd1) & (1'b0 == gmem_RVALID));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'b1 == ap_enable_reg_pp1_iter1) & (1'd1 == tmp_3_reg_520) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_enable_reg_pp1_iter1) & (1'd1 == tmp_3_reg_520) & (1'b0 == gmem_RVALID)) | ((1'b1 == ap_enable_reg_pp1_iter3) & (1'b1 == ap_block_state279_io)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_enable_reg_pp1_iter1) & (1'd1 == tmp_3_reg_520) & (1'b0 == gmem_RVALID)) | ((1'b1 == ap_enable_reg_pp1_iter3) & (1'b1 == ap_block_state279_io)));
end

assign ap_block_state138_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state139_pp0_stage0_iter1 = ((tmp_7_reg_494 == 1'd1) & (1'b0 == gmem_RVALID));
end

assign ap_block_state140_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state276_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state277_pp1_stage0_iter1 = ((1'd1 == tmp_3_reg_520) & (1'b0 == gmem_RVALID));
end

assign ap_block_state278_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state279_io = ((1'd1 == ap_reg_pp1_iter2_tmp_3_reg_520) & (1'b0 == ap_sig_ioackin_gmem_WREADY));
end

assign ap_block_state279_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign j1_0_reg2mem21_0_i_i_cast_fu_398_p1 = j1_0_reg2mem21_0_i_i_reg_204;

assign j_0_reg2mem23_0_i_i_cast_fu_358_p1 = j_0_reg2mem23_0_i_i_phi_fu_196_p4;

assign p_lshr_fu_272_p4 = {{p_neg_fu_267_p2[31:8]}};

assign p_neg_fu_267_p2 = ($signed(32'd4294967041) - $signed(arg_n_elements_reg_437));

assign p_neg_t_fu_282_p2 = (24'd0 - p_lshr_fu_272_p4);

assign p_reg2mem13_0_i_i_fu_330_p2 = (arg_n_elements_reg_437 - i_0_reg2mem27_0_i_i_reg_181);

assign p_reg2mem1_0_i_i_fu_407_p2 = (j1_0_reg2mem21_0_i_i_reg_204 + 31'd1);

assign p_reg2mem7_0_i_i_fu_367_p2 = (j_0_reg2mem23_0_i_i_phi_fu_196_p4 + 31'd1);

assign size_0_reg2mem25_0_i_i_fu_335_p3 = ((tmp_6_fu_325_p2[0:0] === 1'b1) ? p_reg2mem13_0_i_i_fu_330_p2 : 32'd256);

assign tmp_10_fu_413_p1 = j1_0_reg2mem21_0_i_i_reg_204;

assign tmp_11_fu_254_p2 = (arg_n_elements_reg_437 + 32'd255);

assign tmp_12_fu_259_p3 = tmp_11_fu_254_p2[32'd31];

assign tmp_13_fu_418_p2 = (arrayA_load_reg_534 + gmem_addr_1_read_reg_539);

assign tmp_14_fu_288_p4 = {{tmp_11_fu_254_p2[31:8]}};

assign tmp_15_fu_298_p3 = ((tmp_12_fu_259_p3[0:0] === 1'b1) ? p_neg_t_fu_282_p2 : tmp_14_fu_288_p4);

assign tmp_16_fu_343_p1 = $signed(i_0_reg2mem27_0_i_i_reg_181);

assign tmp_17_fu_347_p2 = ($signed(tmp_4_reg_445) + $signed(tmp_16_fu_343_p1));

assign tmp_18_fu_306_p3 = {{tmp_15_fu_298_p3}, {8'd0}};

assign tmp_19_fu_378_p2 = ($signed(tmp_8_reg_450) + $signed(tmp_16_reg_482));

assign tmp_20_fu_382_p2 = ($signed(tmp_9_reg_455) + $signed(tmp_16_reg_482));

assign tmp_21_fu_314_p2 = ((i_0_reg2mem27_0_i_i_reg_181 == tmp_18_reg_460) ? 1'b1 : 1'b0);

assign tmp_3_fu_402_p2 = (($signed(j1_0_reg2mem21_0_i_i_cast_fu_398_p1) < $signed(size_0_reg2mem25_0_i_i_reg_473)) ? 1'b1 : 1'b0);

assign tmp_4_fu_245_p1 = tmp_reg_422;

assign tmp_5_fu_319_p2 = (i_0_reg2mem27_0_i_i_reg_181 + 32'd256);

assign tmp_6_fu_325_p2 = (($signed(tmp_5_fu_319_p2) > $signed(arg_n_elements_reg_437)) ? 1'b1 : 1'b0);

assign tmp_7_fu_362_p2 = (($signed(j_0_reg2mem23_0_i_i_cast_fu_358_p1) < $signed(size_0_reg2mem25_0_i_i_reg_473)) ? 1'b1 : 1'b0);

assign tmp_8_fu_248_p1 = tmp_1_reg_427;

assign tmp_9_fu_251_p1 = tmp_2_reg_432;

assign tmp_s_fu_373_p1 = ap_reg_pp0_iter1_j_0_reg2mem23_0_i_i_reg_192;

always @ (posedge ap_clk) begin
    tmp_4_reg_445[63:62] <= 2'b00;
    tmp_8_reg_450[63:62] <= 2'b00;
    tmp_9_reg_455[63:62] <= 2'b00;
    tmp_18_reg_460[7:0] <= 8'b00000000;
end

endmodule //krnl_vadd_rtl
