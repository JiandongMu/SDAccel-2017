// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "krnl_write.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic krnl_write::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic krnl_write::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<135> krnl_write::ap_ST_fsm_state1 = "1";
const sc_lv<135> krnl_write::ap_ST_fsm_state2 = "10";
const sc_lv<135> krnl_write::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<135> krnl_write::ap_ST_fsm_state5 = "1000";
const sc_lv<135> krnl_write::ap_ST_fsm_state6 = "10000";
const sc_lv<135> krnl_write::ap_ST_fsm_state7 = "100000";
const sc_lv<135> krnl_write::ap_ST_fsm_state8 = "1000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state9 = "10000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state10 = "100000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state11 = "1000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state12 = "10000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state13 = "100000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state14 = "1000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state15 = "10000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state16 = "100000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state17 = "1000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state18 = "10000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state19 = "100000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state20 = "1000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state21 = "10000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state22 = "100000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state23 = "1000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state24 = "10000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state25 = "100000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state26 = "1000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state27 = "10000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state28 = "100000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state29 = "1000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state30 = "10000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state31 = "100000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state32 = "1000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state33 = "10000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state34 = "100000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state35 = "1000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state36 = "10000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state37 = "100000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state38 = "1000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state39 = "10000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state40 = "100000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state41 = "1000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state42 = "10000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state43 = "100000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state44 = "1000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state45 = "10000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state46 = "100000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state47 = "1000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state48 = "10000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state49 = "100000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state50 = "1000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state51 = "10000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state52 = "100000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state53 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state54 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state55 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state56 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state57 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state58 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state59 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state60 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state61 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state62 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state63 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state64 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state65 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state66 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state67 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state68 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state69 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state70 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state71 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state72 = "10000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state73 = "100000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state74 = "1000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state75 = "10000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state76 = "100000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state77 = "1000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state78 = "10000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state79 = "100000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state80 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state81 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state82 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state83 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state84 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state85 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state86 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state87 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state88 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state89 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state90 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state91 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state92 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state93 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state94 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state95 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state96 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state97 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state98 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state99 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state100 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state101 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state102 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state103 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state104 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state105 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state106 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state107 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state108 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state109 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state110 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state111 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state112 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state113 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state114 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state115 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state116 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state117 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state118 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state119 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state120 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state121 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state122 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state123 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state124 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state125 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state126 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state127 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state128 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state129 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state130 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state131 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state132 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state133 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state134 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state135 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<135> krnl_write::ap_ST_fsm_state136 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> krnl_write::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool krnl_write::ap_const_boolean_1 = true;
const sc_lv<32> krnl_write::ap_const_lv32_1 = "1";
const sc_lv<32> krnl_write::ap_const_lv32_2 = "10";
const bool krnl_write::ap_const_boolean_0 = false;
const sc_lv<1> krnl_write::ap_const_lv1_1 = "1";
const sc_lv<32> krnl_write::ap_const_lv32_86 = "10000110";
const sc_lv<1> krnl_write::ap_const_lv1_0 = "0";
const int krnl_write::C_S_AXI_DATA_WIDTH = "100000";
const int krnl_write::C_M_AXI_GMEM_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int krnl_write::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int krnl_write::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int krnl_write::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int krnl_write::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<31> krnl_write::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<3> krnl_write::ap_const_lv3_0 = "000";
const sc_lv<2> krnl_write::ap_const_lv2_0 = "00";
const sc_lv<4> krnl_write::ap_const_lv4_0 = "0000";
const sc_lv<4> krnl_write::ap_const_lv4_F = "1111";
const sc_lv<32> krnl_write::ap_const_lv32_3F = "111111";
const sc_lv<31> krnl_write::ap_const_lv31_1 = "1";
const sc_lv<32> krnl_write::ap_const_lv32_1F = "11111";
const sc_lv<64> krnl_write::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";

krnl_write::krnl_write(sc_module_name name) : sc_module(name), mVcdFile(0) {
    krnl_write_control_s_axi_U = new krnl_write_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("krnl_write_control_s_axi_U");
    krnl_write_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    krnl_write_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    krnl_write_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    krnl_write_control_s_axi_U->WVALID(s_axi_control_WVALID);
    krnl_write_control_s_axi_U->WREADY(s_axi_control_WREADY);
    krnl_write_control_s_axi_U->WDATA(s_axi_control_WDATA);
    krnl_write_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    krnl_write_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    krnl_write_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    krnl_write_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    krnl_write_control_s_axi_U->RVALID(s_axi_control_RVALID);
    krnl_write_control_s_axi_U->RREADY(s_axi_control_RREADY);
    krnl_write_control_s_axi_U->RDATA(s_axi_control_RDATA);
    krnl_write_control_s_axi_U->RRESP(s_axi_control_RRESP);
    krnl_write_control_s_axi_U->BVALID(s_axi_control_BVALID);
    krnl_write_control_s_axi_U->BREADY(s_axi_control_BREADY);
    krnl_write_control_s_axi_U->BRESP(s_axi_control_BRESP);
    krnl_write_control_s_axi_U->ACLK(ap_clk);
    krnl_write_control_s_axi_U->ARESET(ap_rst_n_inv);
    krnl_write_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    krnl_write_control_s_axi_U->ap_start(ap_start);
    krnl_write_control_s_axi_U->interrupt(interrupt);
    krnl_write_control_s_axi_U->ap_ready(ap_ready);
    krnl_write_control_s_axi_U->ap_done(ap_done);
    krnl_write_control_s_axi_U->ap_idle(ap_idle);
    krnl_write_control_s_axi_U->c(c);
    krnl_write_control_s_axi_U->n_elements(n_elements);
    krnl_write_control_s_axi_U->p_xcl_gv_pipe_c(p_xcl_gv_pipe_c);
    krnl_write_gmem_m_axi_U = new krnl_write_gmem_m_axi<32,64,133,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_TARGET_ADDR,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("krnl_write_gmem_m_axi_U");
    krnl_write_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    krnl_write_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    krnl_write_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    krnl_write_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    krnl_write_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    krnl_write_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    krnl_write_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    krnl_write_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    krnl_write_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    krnl_write_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    krnl_write_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    krnl_write_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    krnl_write_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    krnl_write_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    krnl_write_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    krnl_write_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    krnl_write_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    krnl_write_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    krnl_write_gmem_m_axi_U->WID(m_axi_gmem_WID);
    krnl_write_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    krnl_write_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    krnl_write_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    krnl_write_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    krnl_write_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    krnl_write_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    krnl_write_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    krnl_write_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    krnl_write_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    krnl_write_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    krnl_write_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    krnl_write_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    krnl_write_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    krnl_write_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    krnl_write_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    krnl_write_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    krnl_write_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    krnl_write_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    krnl_write_gmem_m_axi_U->RID(m_axi_gmem_RID);
    krnl_write_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    krnl_write_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    krnl_write_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    krnl_write_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    krnl_write_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    krnl_write_gmem_m_axi_U->BID(m_axi_gmem_BID);
    krnl_write_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    krnl_write_gmem_m_axi_U->ACLK(ap_clk);
    krnl_write_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    krnl_write_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    krnl_write_gmem_m_axi_U->I_ARVALID(ap_var_for_const1);
    krnl_write_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    krnl_write_gmem_m_axi_U->I_ARADDR(ap_var_for_const2);
    krnl_write_gmem_m_axi_U->I_ARID(ap_var_for_const3);
    krnl_write_gmem_m_axi_U->I_ARLEN(ap_var_for_const4);
    krnl_write_gmem_m_axi_U->I_ARSIZE(ap_var_for_const5);
    krnl_write_gmem_m_axi_U->I_ARLOCK(ap_var_for_const6);
    krnl_write_gmem_m_axi_U->I_ARCACHE(ap_var_for_const7);
    krnl_write_gmem_m_axi_U->I_ARQOS(ap_var_for_const7);
    krnl_write_gmem_m_axi_U->I_ARPROT(ap_var_for_const5);
    krnl_write_gmem_m_axi_U->I_ARUSER(ap_var_for_const3);
    krnl_write_gmem_m_axi_U->I_ARBURST(ap_var_for_const6);
    krnl_write_gmem_m_axi_U->I_ARREGION(ap_var_for_const7);
    krnl_write_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    krnl_write_gmem_m_axi_U->I_RREADY(ap_var_for_const1);
    krnl_write_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    krnl_write_gmem_m_axi_U->I_RID(gmem_RID);
    krnl_write_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    krnl_write_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    krnl_write_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    krnl_write_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    krnl_write_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    krnl_write_gmem_m_axi_U->I_AWADDR(gmem_addr_reg_206);
    krnl_write_gmem_m_axi_U->I_AWID(ap_var_for_const3);
    krnl_write_gmem_m_axi_U->I_AWLEN(arg_n_elements_reg_200);
    krnl_write_gmem_m_axi_U->I_AWSIZE(ap_var_for_const5);
    krnl_write_gmem_m_axi_U->I_AWLOCK(ap_var_for_const6);
    krnl_write_gmem_m_axi_U->I_AWCACHE(ap_var_for_const7);
    krnl_write_gmem_m_axi_U->I_AWQOS(ap_var_for_const7);
    krnl_write_gmem_m_axi_U->I_AWPROT(ap_var_for_const5);
    krnl_write_gmem_m_axi_U->I_AWUSER(ap_var_for_const3);
    krnl_write_gmem_m_axi_U->I_AWBURST(ap_var_for_const6);
    krnl_write_gmem_m_axi_U->I_AWREGION(ap_var_for_const7);
    krnl_write_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    krnl_write_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    krnl_write_gmem_m_axi_U->I_WDATA(p_0_fu_74);
    krnl_write_gmem_m_axi_U->I_WID(ap_var_for_const3);
    krnl_write_gmem_m_axi_U->I_WUSER(ap_var_for_const3);
    krnl_write_gmem_m_axi_U->I_WLAST(ap_var_for_const1);
    krnl_write_gmem_m_axi_U->I_WSTRB(ap_var_for_const8);
    krnl_write_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    krnl_write_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    krnl_write_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    krnl_write_gmem_m_axi_U->I_BID(gmem_BID);
    krnl_write_gmem_m_axi_U->I_BUSER(gmem_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state136);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( pipe_c_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op165_read_state3 );
    sensitive << ( ap_predicate_op170_read_state3 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( pipe_c_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op165_read_state3 );
    sensitive << ( ap_predicate_op170_read_state3 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( pipe_c_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op165_read_state3 );
    sensitive << ( ap_predicate_op170_read_state3 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);
    sensitive << ( pipe_c_TVALID );
    sensitive << ( ap_predicate_op165_read_state3 );
    sensitive << ( ap_predicate_op170_read_state3 );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( tmp_2_reg_212 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_1309);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_2_reg_212 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( tmp_2_fu_157_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state136 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op165_read_state3);
    sensitive << ( tmp_2_fu_157_p2 );
    sensitive << ( icmp_fu_178_p2 );

    SC_METHOD(thread_ap_predicate_op170_read_state3);
    sensitive << ( tmp_2_fu_157_p2 );
    sensitive << ( icmp_fu_178_p2 );
    sensitive << ( tmp_4_fu_184_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state136 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state136 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_2_reg_212 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state136 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_2_reg_212 );

    SC_METHOD(thread_i_0_reg2mem5_0_i_i_cast_fu_153_p1);
    sensitive << ( i_0_reg2mem5_0_i_i_reg_117 );

    SC_METHOD(thread_icmp_fu_178_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_fu_157_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_1_fu_168_p4 );

    SC_METHOD(thread_p_reg2mem_0_i_i_fu_162_p2);
    sensitive << ( i_0_reg2mem5_0_i_i_reg_117 );

    SC_METHOD(thread_pipe_c_TDATA_blk_n);
    sensitive << ( pipe_c_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_fu_157_p2 );
    sensitive << ( icmp_fu_178_p2 );
    sensitive << ( tmp_4_fu_184_p2 );

    SC_METHOD(thread_pipe_c_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op165_read_state3 );
    sensitive << ( ap_predicate_op170_read_state3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_1_fu_168_p4);
    sensitive << ( pipe_c_count );

    SC_METHOD(thread_tmp_2_fu_157_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( arg_n_elements_reg_200 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_0_reg2mem5_0_i_i_cast_fu_153_p1 );

    SC_METHOD(thread_tmp_4_fu_184_p2);
    sensitive << ( pipe_c_count );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_fu_157_p2 );
    sensitive << ( icmp_fu_178_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_6_fu_143_p1);
    sensitive << ( tmp_fu_133_p4 );

    SC_METHOD(thread_tmp_fu_133_p4);
    sensitive << ( c );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state136 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_fu_157_p2 );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const2);

    ap_rst_n_inv = SC_LOGIC_1;
    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "krnl_write_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, pipe_c_TDATA, "(port)pipe_c_TDATA");
    sc_trace(mVcdFile, pipe_c_TVALID, "(port)pipe_c_TVALID");
    sc_trace(mVcdFile, pipe_c_TREADY, "(port)pipe_c_TREADY");
    sc_trace(mVcdFile, pipe_c_count, "(port)pipe_c_count");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, c, "c");
    sc_trace(mVcdFile, n_elements, "n_elements");
    sc_trace(mVcdFile, p_xcl_gv_pipe_c, "p_xcl_gv_pipe_c");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_2_reg_212, "tmp_2_reg_212");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state136, "ap_CS_fsm_state136");
    sc_trace(mVcdFile, pipe_c_TDATA_blk_n, "pipe_c_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_2_fu_157_p2, "tmp_2_fu_157_p2");
    sc_trace(mVcdFile, icmp_fu_178_p2, "icmp_fu_178_p2");
    sc_trace(mVcdFile, tmp_4_fu_184_p2, "tmp_4_fu_184_p2");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, i_0_reg2mem5_0_i_i_reg_117, "i_0_reg2mem5_0_i_i_reg_117");
    sc_trace(mVcdFile, arg_n_elements_reg_200, "arg_n_elements_reg_200");
    sc_trace(mVcdFile, gmem_addr_reg_206, "gmem_addr_reg_206");
    sc_trace(mVcdFile, ap_predicate_op165_read_state3, "ap_predicate_op165_read_state3");
    sc_trace(mVcdFile, ap_predicate_op170_read_state3, "ap_predicate_op170_read_state3");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, p_reg2mem_0_i_i_fu_162_p2, "p_reg2mem_0_i_i_fu_162_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, tmp_6_fu_143_p1, "tmp_6_fu_143_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, p_0_fu_74, "p_0_fu_74");
    sc_trace(mVcdFile, tmp_fu_133_p4, "tmp_fu_133_p4");
    sc_trace(mVcdFile, i_0_reg2mem5_0_i_i_cast_fu_153_p1, "i_0_reg2mem5_0_i_i_cast_fu_153_p1");
    sc_trace(mVcdFile, tmp_1_fu_168_p4, "tmp_1_fu_168_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_1309, "ap_condition_1309");
#endif

    }
    mHdltvinHandle.open("krnl_write.hdltvin.dat");
    mHdltvoutHandle.open("krnl_write.hdltvout.dat");
}

krnl_write::~krnl_write() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete krnl_write_control_s_axi_U;
    delete krnl_write_gmem_m_axi_U;
}

void krnl_write::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void krnl_write::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void krnl_write::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv32_0;
}

void krnl_write::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void krnl_write::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv3_0;
}

void krnl_write::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv2_0;
}

void krnl_write::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_0;
}

void krnl_write::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv4_F;
}

void krnl_write::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_0;
}

void krnl_write::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_1309.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_157_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_reg2mem5_0_i_i_reg_117 = p_reg2mem_0_i_i_fu_162_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
        i_0_reg2mem5_0_i_i_reg_117 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        arg_n_elements_reg_200 = n_elements.read();
        gmem_addr_reg_206 = tmp_6_fu_143_p1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op165_read_state3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op170_read_state3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        p_0_fu_74 = pipe_c_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_2_reg_212 = tmp_2_fu_157_p2.read();
    }
}

void krnl_write::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void krnl_write::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void krnl_write::thread_ap_CS_fsm_state136() {
    ap_CS_fsm_state136 = ap_CS_fsm.read()[134];
}

void krnl_write::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void krnl_write::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void krnl_write::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op165_read_state3.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op170_read_state3.read()))));
}

void krnl_write::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op165_read_state3.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op170_read_state3.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void krnl_write::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op165_read_state3.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op170_read_state3.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void krnl_write::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op165_read_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, pipe_c_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op170_read_state3.read())));
}

void krnl_write::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(tmp_2_reg_212.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()));
}

void krnl_write::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void krnl_write::thread_ap_condition_1309() {
    ap_condition_1309 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_2_reg_212.read(), ap_const_lv1_1));
}

void krnl_write::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(tmp_2_fu_157_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void krnl_write::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state136.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void krnl_write::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void krnl_write::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void krnl_write::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void krnl_write::thread_ap_predicate_op165_read_state3() {
    ap_predicate_op165_read_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_157_p2.read()) && esl_seteq<1,1,1>(icmp_fu_178_p2.read(), ap_const_lv1_0));
}

void krnl_write::thread_ap_predicate_op170_read_state3() {
    ap_predicate_op170_read_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_157_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_178_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_184_p2.read()));
}

void krnl_write::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state136.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void krnl_write::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void krnl_write::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void krnl_write::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void krnl_write::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state136.read()) && 
         esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void krnl_write::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_212.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void krnl_write::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void krnl_write::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state136.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void krnl_write::thread_gmem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_2_reg_212.read(), ap_const_lv1_1))) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void krnl_write::thread_i_0_reg2mem5_0_i_i_cast_fu_153_p1() {
    i_0_reg2mem5_0_i_i_cast_fu_153_p1 = esl_zext<32,31>(i_0_reg2mem5_0_i_i_reg_117.read());
}

void krnl_write::thread_icmp_fu_178_p2() {
    icmp_fu_178_p2 = (!tmp_1_fu_168_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_168_p4.read() == ap_const_lv31_0);
}

void krnl_write::thread_p_reg2mem_0_i_i_fu_162_p2() {
    p_reg2mem_0_i_i_fu_162_p2 = (!i_0_reg2mem5_0_i_i_reg_117.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_reg2mem5_0_i_i_reg_117.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void krnl_write::thread_pipe_c_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_157_p2.read()) && 
          esl_seteq<1,1,1>(icmp_fu_178_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_157_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_178_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_184_p2.read())))) {
        pipe_c_TDATA_blk_n = pipe_c_TVALID.read();
    } else {
        pipe_c_TDATA_blk_n = ap_const_logic_1;
    }
}

void krnl_write::thread_pipe_c_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op165_read_state3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op170_read_state3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        pipe_c_TREADY = ap_const_logic_1;
    } else {
        pipe_c_TREADY = ap_const_logic_0;
    }
}

void krnl_write::thread_tmp_1_fu_168_p4() {
    tmp_1_fu_168_p4 = pipe_c_count.read().range(31, 1);
}

void krnl_write::thread_tmp_2_fu_157_p2() {
    tmp_2_fu_157_p2 = (!i_0_reg2mem5_0_i_i_cast_fu_153_p1.read().is_01() || !arg_n_elements_reg_200.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_reg2mem5_0_i_i_cast_fu_153_p1.read()) < sc_bigint<32>(arg_n_elements_reg_200.read()));
}

void krnl_write::thread_tmp_4_fu_184_p2() {
    tmp_4_fu_184_p2 = (!pipe_c_count.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(pipe_c_count.read() == ap_const_lv32_0);
}

void krnl_write::thread_tmp_6_fu_143_p1() {
    tmp_6_fu_143_p1 = esl_zext<64,62>(tmp_fu_133_p4.read());
}

void krnl_write::thread_tmp_fu_133_p4() {
    tmp_fu_133_p4 = c.read().range(63, 2);
}

void krnl_write::thread_ap_NS_fsm() {
    if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        } else {
            ap_NS_fsm = ap_ST_fsm_state2;
        }
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_pp0_stage0))
    {
        if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_2_fu_157_p2.read(), ap_const_lv1_0))) {
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_2_fu_157_p2.read(), ap_const_lv1_0))) {
            ap_NS_fsm = ap_ST_fsm_state5;
        } else {
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        }
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        ap_NS_fsm = ap_ST_fsm_state68;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state70;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state71;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state71))
    {
        ap_NS_fsm = ap_ST_fsm_state72;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state72))
    {
        ap_NS_fsm = ap_ST_fsm_state73;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state73))
    {
        ap_NS_fsm = ap_ST_fsm_state74;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state74))
    {
        ap_NS_fsm = ap_ST_fsm_state75;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state75))
    {
        ap_NS_fsm = ap_ST_fsm_state76;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state76))
    {
        ap_NS_fsm = ap_ST_fsm_state77;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state77))
    {
        ap_NS_fsm = ap_ST_fsm_state78;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state78))
    {
        ap_NS_fsm = ap_ST_fsm_state79;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state79))
    {
        ap_NS_fsm = ap_ST_fsm_state80;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state80))
    {
        ap_NS_fsm = ap_ST_fsm_state81;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state81))
    {
        ap_NS_fsm = ap_ST_fsm_state82;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state82))
    {
        ap_NS_fsm = ap_ST_fsm_state83;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state83))
    {
        ap_NS_fsm = ap_ST_fsm_state84;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state84))
    {
        ap_NS_fsm = ap_ST_fsm_state85;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state85))
    {
        ap_NS_fsm = ap_ST_fsm_state86;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state86))
    {
        ap_NS_fsm = ap_ST_fsm_state87;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state87))
    {
        ap_NS_fsm = ap_ST_fsm_state88;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state88))
    {
        ap_NS_fsm = ap_ST_fsm_state89;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state89))
    {
        ap_NS_fsm = ap_ST_fsm_state90;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state90))
    {
        ap_NS_fsm = ap_ST_fsm_state91;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state91))
    {
        ap_NS_fsm = ap_ST_fsm_state92;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state92))
    {
        ap_NS_fsm = ap_ST_fsm_state93;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state93))
    {
        ap_NS_fsm = ap_ST_fsm_state94;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state94))
    {
        ap_NS_fsm = ap_ST_fsm_state95;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state95))
    {
        ap_NS_fsm = ap_ST_fsm_state96;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state96))
    {
        ap_NS_fsm = ap_ST_fsm_state97;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state97))
    {
        ap_NS_fsm = ap_ST_fsm_state98;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state98))
    {
        ap_NS_fsm = ap_ST_fsm_state99;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state99))
    {
        ap_NS_fsm = ap_ST_fsm_state100;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state100))
    {
        ap_NS_fsm = ap_ST_fsm_state101;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state101))
    {
        ap_NS_fsm = ap_ST_fsm_state102;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state102))
    {
        ap_NS_fsm = ap_ST_fsm_state103;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state103))
    {
        ap_NS_fsm = ap_ST_fsm_state104;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state104))
    {
        ap_NS_fsm = ap_ST_fsm_state105;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state105))
    {
        ap_NS_fsm = ap_ST_fsm_state106;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state106))
    {
        ap_NS_fsm = ap_ST_fsm_state107;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state107))
    {
        ap_NS_fsm = ap_ST_fsm_state108;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state108))
    {
        ap_NS_fsm = ap_ST_fsm_state109;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state109))
    {
        ap_NS_fsm = ap_ST_fsm_state110;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state110))
    {
        ap_NS_fsm = ap_ST_fsm_state111;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state111))
    {
        ap_NS_fsm = ap_ST_fsm_state112;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state112))
    {
        ap_NS_fsm = ap_ST_fsm_state113;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state113))
    {
        ap_NS_fsm = ap_ST_fsm_state114;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state114))
    {
        ap_NS_fsm = ap_ST_fsm_state115;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state115))
    {
        ap_NS_fsm = ap_ST_fsm_state116;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state116))
    {
        ap_NS_fsm = ap_ST_fsm_state117;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state117))
    {
        ap_NS_fsm = ap_ST_fsm_state118;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state118))
    {
        ap_NS_fsm = ap_ST_fsm_state119;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state119))
    {
        ap_NS_fsm = ap_ST_fsm_state120;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state120))
    {
        ap_NS_fsm = ap_ST_fsm_state121;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state121))
    {
        ap_NS_fsm = ap_ST_fsm_state122;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state122))
    {
        ap_NS_fsm = ap_ST_fsm_state123;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state123))
    {
        ap_NS_fsm = ap_ST_fsm_state124;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state124))
    {
        ap_NS_fsm = ap_ST_fsm_state125;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state125))
    {
        ap_NS_fsm = ap_ST_fsm_state126;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state126))
    {
        ap_NS_fsm = ap_ST_fsm_state127;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state127))
    {
        ap_NS_fsm = ap_ST_fsm_state128;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state128))
    {
        ap_NS_fsm = ap_ST_fsm_state129;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state129))
    {
        ap_NS_fsm = ap_ST_fsm_state130;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state130))
    {
        ap_NS_fsm = ap_ST_fsm_state131;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state131))
    {
        ap_NS_fsm = ap_ST_fsm_state132;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state132))
    {
        ap_NS_fsm = ap_ST_fsm_state133;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state133))
    {
        ap_NS_fsm = ap_ST_fsm_state134;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state134))
    {
        ap_NS_fsm = ap_ST_fsm_state135;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state135))
    {
        ap_NS_fsm = ap_ST_fsm_state136;
    }
    else if (esl_seteq<1,135,135>(ap_CS_fsm.read(), ap_ST_fsm_state136))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state136.read()) && esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state136;
        }
    }
    else
    {
        ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}
void krnl_write::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_c_TDATA\" :  \"" << pipe_c_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_c_TVALID\" :  \"" << pipe_c_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pipe_c_TREADY\" :  \"" << pipe_c_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_c_count\" :  \"" << pipe_c_count.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

