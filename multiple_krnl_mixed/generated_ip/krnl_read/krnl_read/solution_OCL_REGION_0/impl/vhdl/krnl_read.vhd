-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_read is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    pipe_a_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    pipe_a_TVALID : OUT STD_LOGIC;
    pipe_a_TREADY : IN STD_LOGIC;
    pipe_a_count : IN STD_LOGIC_VECTOR (31 downto 0);
    pipe_b_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    pipe_b_TVALID : OUT STD_LOGIC;
    pipe_b_TREADY : IN STD_LOGIC;
    pipe_b_count : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of krnl_read is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_read,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1418,HLS_SYN_LUT=1835}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC := '1';
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (63 downto 0);
    signal b : STD_LOGIC_VECTOR (63 downto 0);
    signal n_elements : STD_LOGIC_VECTOR (31 downto 0);
    signal p_xcl_gv_pipe_a : STD_LOGIC_VECTOR (63 downto 0);
    signal p_xcl_gv_pipe_b : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_3_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal pipe_a_TDATA_blk_n : STD_LOGIC;
    signal icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter66_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal pipe_b_TDATA_blk_n : STD_LOGIC;
    signal icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter67_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg2mem9_0_i_i_reg_152 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_fu_173_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_cast_reg_272 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_cast_fu_187_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_1_cast_reg_277 : STD_LOGIC_VECTOR (62 downto 0);
    signal arg_n_elements_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state82_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state84_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state86_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state88_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state90_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state92_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state94_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state96_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state98_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state100_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state102_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state104_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state106_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state108_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state110_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state112_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state114_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state116_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state118_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state120_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state122_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state124_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state126_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state128_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state130_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state132_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state134_pp0_stage0_iter66 : BOOLEAN;
    signal ap_block_state136_pp0_stage0_iter67 : BOOLEAN;
    signal ap_block_state138_pp0_stage0_iter68 : BOOLEAN;
    signal ap_sig_ioackin_pipe_b_TREADY : STD_LOGIC;
    signal ap_block_state138_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_reg2mem_0_i_i_fu_200_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_reg2mem_0_i_i_reg_291 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem_addr_reg_296 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state39_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state41_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state43_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state45_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state47_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state49_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state51_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state53_pp0_stage1_iter25 : BOOLEAN;
    signal ap_block_state55_pp0_stage1_iter26 : BOOLEAN;
    signal ap_block_state57_pp0_stage1_iter27 : BOOLEAN;
    signal ap_block_state59_pp0_stage1_iter28 : BOOLEAN;
    signal ap_block_state61_pp0_stage1_iter29 : BOOLEAN;
    signal ap_block_state63_pp0_stage1_iter30 : BOOLEAN;
    signal ap_block_state65_pp0_stage1_iter31 : BOOLEAN;
    signal ap_block_state67_pp0_stage1_iter32 : BOOLEAN;
    signal ap_block_state69_pp0_stage1_iter33 : BOOLEAN;
    signal ap_block_state71_pp0_stage1_iter34 : BOOLEAN;
    signal ap_block_state73_pp0_stage1_iter35 : BOOLEAN;
    signal ap_block_state75_pp0_stage1_iter36 : BOOLEAN;
    signal ap_block_state77_pp0_stage1_iter37 : BOOLEAN;
    signal ap_block_state79_pp0_stage1_iter38 : BOOLEAN;
    signal ap_block_state81_pp0_stage1_iter39 : BOOLEAN;
    signal ap_block_state83_pp0_stage1_iter40 : BOOLEAN;
    signal ap_block_state85_pp0_stage1_iter41 : BOOLEAN;
    signal ap_block_state87_pp0_stage1_iter42 : BOOLEAN;
    signal ap_block_state89_pp0_stage1_iter43 : BOOLEAN;
    signal ap_block_state91_pp0_stage1_iter44 : BOOLEAN;
    signal ap_block_state93_pp0_stage1_iter45 : BOOLEAN;
    signal ap_block_state95_pp0_stage1_iter46 : BOOLEAN;
    signal ap_block_state97_pp0_stage1_iter47 : BOOLEAN;
    signal ap_block_state99_pp0_stage1_iter48 : BOOLEAN;
    signal ap_block_state101_pp0_stage1_iter49 : BOOLEAN;
    signal ap_block_state103_pp0_stage1_iter50 : BOOLEAN;
    signal ap_block_state105_pp0_stage1_iter51 : BOOLEAN;
    signal ap_block_state107_pp0_stage1_iter52 : BOOLEAN;
    signal ap_block_state109_pp0_stage1_iter53 : BOOLEAN;
    signal ap_block_state111_pp0_stage1_iter54 : BOOLEAN;
    signal ap_block_state113_pp0_stage1_iter55 : BOOLEAN;
    signal ap_block_state115_pp0_stage1_iter56 : BOOLEAN;
    signal ap_block_state117_pp0_stage1_iter57 : BOOLEAN;
    signal ap_block_state119_pp0_stage1_iter58 : BOOLEAN;
    signal ap_block_state121_pp0_stage1_iter59 : BOOLEAN;
    signal ap_block_state123_pp0_stage1_iter60 : BOOLEAN;
    signal ap_block_state125_pp0_stage1_iter61 : BOOLEAN;
    signal ap_block_state127_pp0_stage1_iter62 : BOOLEAN;
    signal ap_block_state129_pp0_stage1_iter63 : BOOLEAN;
    signal ap_block_state131_pp0_stage1_iter64 : BOOLEAN;
    signal ap_block_state133_pp0_stage1_iter65 : BOOLEAN;
    signal ap_block_state135_pp0_stage1_iter66 : BOOLEAN;
    signal ap_block_state137_pp0_stage1_iter67 : BOOLEAN;
    signal ap_sig_ioackin_pipe_a_TREADY : STD_LOGIC;
    signal ap_block_state137_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter22_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter23_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter24_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter25_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter26_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter27_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter28_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter29_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter30_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter31_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter32_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter33_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter34_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter35_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter36_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter37_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter38_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter39_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter40_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter41_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter42_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter43_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter44_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter45_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter46_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter47_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter48_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter49_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter50_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter51_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter52_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter53_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter54_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter55_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter56_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter57_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter58_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter59_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter60_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter61_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter62_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter63_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter64_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter65_icmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp4_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter22_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter23_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter24_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter25_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter26_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter27_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter28_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter29_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter30_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter31_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter32_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter33_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter34_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter35_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter36_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter37_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter38_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter39_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter40_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter41_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter42_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter43_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter44_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter45_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter46_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter47_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter48_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter49_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter50_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter51_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter52_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter53_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter54_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter55_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter56_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter57_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter58_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter59_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter60_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter61_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter62_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter63_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter64_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter65_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter66_icmp4_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal i_0_reg2mem9_0_i_i_phi_fu_156_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal arg_a_i_0_sum_cast_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arg_b_i_0_sum_cast_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_pipe_a_TREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_pipe_b_TREADY : STD_LOGIC := '0';
    signal tmp_fu_163_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_1_fu_177_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal i_0_reg2mem9_0_i_i_cast_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_206_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal arg_a_i_0_sum_fu_210_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal arg_b_i_0_sum_fu_225_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_fu_240_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_4_fu_256_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1162 : BOOLEAN;
    signal ap_condition_1166 : BOOLEAN;
    signal ap_condition_883 : BOOLEAN;
    signal ap_condition_897 : BOOLEAN;

    component krnl_read_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (63 downto 0);
        b : OUT STD_LOGIC_VECTOR (63 downto 0);
        n_elements : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_xcl_gv_pipe_a : OUT STD_LOGIC_VECTOR (63 downto 0);
        p_xcl_gv_pipe_b : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component krnl_read_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    krnl_read_control_s_axi_U : component krnl_read_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        b => b,
        n_elements => n_elements,
        p_xcl_gv_pipe_a => p_xcl_gv_pipe_a,
        p_xcl_gv_pipe_b => p_xcl_gv_pipe_b);

    krnl_read_gmem_m_axi_U : component krnl_read_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 133,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_GMEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_3_reg_287 = ap_const_lv1_1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_3_reg_287 = ap_const_lv1_1) and (ap_const_logic_1 = gmem_ARREADY) and (ap_block_pp0_stage1_01001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = gmem_ARREADY) and (ap_block_pp0_stage0_01001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_pipe_a_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_pipe_a_TREADY <= ap_const_logic_0;
            else
                if ((ap_condition_1162 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage1_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_pipe_a_TREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage1_01001 = ap_const_boolean_0) and (ap_const_logic_1 = pipe_a_TREADY))) then 
                        ap_reg_ioackin_pipe_a_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_pipe_b_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_pipe_b_TREADY <= ap_const_logic_0;
            else
                if ((ap_condition_1166 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_pipe_b_TREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = pipe_b_TREADY))) then 
                        ap_reg_ioackin_pipe_b_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_n_inv <= not(ap_rst_n);
        end if;
    end process;

    i_0_reg2mem9_0_i_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_287 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
                i_0_reg2mem9_0_i_i_reg_152 <= p_reg2mem_0_i_i_reg_291;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg2mem9_0_i_i_reg_152 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter10_icmp4_reg_312 <= ap_reg_pp0_iter9_icmp4_reg_312;
                ap_reg_pp0_iter10_icmp_reg_308 <= ap_reg_pp0_iter9_icmp_reg_308;
                ap_reg_pp0_iter11_icmp4_reg_312 <= ap_reg_pp0_iter10_icmp4_reg_312;
                ap_reg_pp0_iter11_icmp_reg_308 <= ap_reg_pp0_iter10_icmp_reg_308;
                ap_reg_pp0_iter12_icmp4_reg_312 <= ap_reg_pp0_iter11_icmp4_reg_312;
                ap_reg_pp0_iter12_icmp_reg_308 <= ap_reg_pp0_iter11_icmp_reg_308;
                ap_reg_pp0_iter13_icmp4_reg_312 <= ap_reg_pp0_iter12_icmp4_reg_312;
                ap_reg_pp0_iter13_icmp_reg_308 <= ap_reg_pp0_iter12_icmp_reg_308;
                ap_reg_pp0_iter14_icmp4_reg_312 <= ap_reg_pp0_iter13_icmp4_reg_312;
                ap_reg_pp0_iter14_icmp_reg_308 <= ap_reg_pp0_iter13_icmp_reg_308;
                ap_reg_pp0_iter15_icmp4_reg_312 <= ap_reg_pp0_iter14_icmp4_reg_312;
                ap_reg_pp0_iter15_icmp_reg_308 <= ap_reg_pp0_iter14_icmp_reg_308;
                ap_reg_pp0_iter16_icmp4_reg_312 <= ap_reg_pp0_iter15_icmp4_reg_312;
                ap_reg_pp0_iter16_icmp_reg_308 <= ap_reg_pp0_iter15_icmp_reg_308;
                ap_reg_pp0_iter17_icmp4_reg_312 <= ap_reg_pp0_iter16_icmp4_reg_312;
                ap_reg_pp0_iter17_icmp_reg_308 <= ap_reg_pp0_iter16_icmp_reg_308;
                ap_reg_pp0_iter18_icmp4_reg_312 <= ap_reg_pp0_iter17_icmp4_reg_312;
                ap_reg_pp0_iter18_icmp_reg_308 <= ap_reg_pp0_iter17_icmp_reg_308;
                ap_reg_pp0_iter19_icmp4_reg_312 <= ap_reg_pp0_iter18_icmp4_reg_312;
                ap_reg_pp0_iter19_icmp_reg_308 <= ap_reg_pp0_iter18_icmp_reg_308;
                ap_reg_pp0_iter1_icmp4_reg_312 <= icmp4_reg_312;
                ap_reg_pp0_iter1_icmp_reg_308 <= icmp_reg_308;
                ap_reg_pp0_iter20_icmp4_reg_312 <= ap_reg_pp0_iter19_icmp4_reg_312;
                ap_reg_pp0_iter20_icmp_reg_308 <= ap_reg_pp0_iter19_icmp_reg_308;
                ap_reg_pp0_iter21_icmp4_reg_312 <= ap_reg_pp0_iter20_icmp4_reg_312;
                ap_reg_pp0_iter21_icmp_reg_308 <= ap_reg_pp0_iter20_icmp_reg_308;
                ap_reg_pp0_iter22_icmp4_reg_312 <= ap_reg_pp0_iter21_icmp4_reg_312;
                ap_reg_pp0_iter22_icmp_reg_308 <= ap_reg_pp0_iter21_icmp_reg_308;
                ap_reg_pp0_iter23_icmp4_reg_312 <= ap_reg_pp0_iter22_icmp4_reg_312;
                ap_reg_pp0_iter23_icmp_reg_308 <= ap_reg_pp0_iter22_icmp_reg_308;
                ap_reg_pp0_iter24_icmp4_reg_312 <= ap_reg_pp0_iter23_icmp4_reg_312;
                ap_reg_pp0_iter24_icmp_reg_308 <= ap_reg_pp0_iter23_icmp_reg_308;
                ap_reg_pp0_iter25_icmp4_reg_312 <= ap_reg_pp0_iter24_icmp4_reg_312;
                ap_reg_pp0_iter25_icmp_reg_308 <= ap_reg_pp0_iter24_icmp_reg_308;
                ap_reg_pp0_iter26_icmp4_reg_312 <= ap_reg_pp0_iter25_icmp4_reg_312;
                ap_reg_pp0_iter26_icmp_reg_308 <= ap_reg_pp0_iter25_icmp_reg_308;
                ap_reg_pp0_iter27_icmp4_reg_312 <= ap_reg_pp0_iter26_icmp4_reg_312;
                ap_reg_pp0_iter27_icmp_reg_308 <= ap_reg_pp0_iter26_icmp_reg_308;
                ap_reg_pp0_iter28_icmp4_reg_312 <= ap_reg_pp0_iter27_icmp4_reg_312;
                ap_reg_pp0_iter28_icmp_reg_308 <= ap_reg_pp0_iter27_icmp_reg_308;
                ap_reg_pp0_iter29_icmp4_reg_312 <= ap_reg_pp0_iter28_icmp4_reg_312;
                ap_reg_pp0_iter29_icmp_reg_308 <= ap_reg_pp0_iter28_icmp_reg_308;
                ap_reg_pp0_iter2_icmp4_reg_312 <= ap_reg_pp0_iter1_icmp4_reg_312;
                ap_reg_pp0_iter2_icmp_reg_308 <= ap_reg_pp0_iter1_icmp_reg_308;
                ap_reg_pp0_iter30_icmp4_reg_312 <= ap_reg_pp0_iter29_icmp4_reg_312;
                ap_reg_pp0_iter30_icmp_reg_308 <= ap_reg_pp0_iter29_icmp_reg_308;
                ap_reg_pp0_iter31_icmp4_reg_312 <= ap_reg_pp0_iter30_icmp4_reg_312;
                ap_reg_pp0_iter31_icmp_reg_308 <= ap_reg_pp0_iter30_icmp_reg_308;
                ap_reg_pp0_iter32_icmp4_reg_312 <= ap_reg_pp0_iter31_icmp4_reg_312;
                ap_reg_pp0_iter32_icmp_reg_308 <= ap_reg_pp0_iter31_icmp_reg_308;
                ap_reg_pp0_iter33_icmp4_reg_312 <= ap_reg_pp0_iter32_icmp4_reg_312;
                ap_reg_pp0_iter33_icmp_reg_308 <= ap_reg_pp0_iter32_icmp_reg_308;
                ap_reg_pp0_iter34_icmp4_reg_312 <= ap_reg_pp0_iter33_icmp4_reg_312;
                ap_reg_pp0_iter34_icmp_reg_308 <= ap_reg_pp0_iter33_icmp_reg_308;
                ap_reg_pp0_iter35_icmp4_reg_312 <= ap_reg_pp0_iter34_icmp4_reg_312;
                ap_reg_pp0_iter35_icmp_reg_308 <= ap_reg_pp0_iter34_icmp_reg_308;
                ap_reg_pp0_iter36_icmp4_reg_312 <= ap_reg_pp0_iter35_icmp4_reg_312;
                ap_reg_pp0_iter36_icmp_reg_308 <= ap_reg_pp0_iter35_icmp_reg_308;
                ap_reg_pp0_iter37_icmp4_reg_312 <= ap_reg_pp0_iter36_icmp4_reg_312;
                ap_reg_pp0_iter37_icmp_reg_308 <= ap_reg_pp0_iter36_icmp_reg_308;
                ap_reg_pp0_iter38_icmp4_reg_312 <= ap_reg_pp0_iter37_icmp4_reg_312;
                ap_reg_pp0_iter38_icmp_reg_308 <= ap_reg_pp0_iter37_icmp_reg_308;
                ap_reg_pp0_iter39_icmp4_reg_312 <= ap_reg_pp0_iter38_icmp4_reg_312;
                ap_reg_pp0_iter39_icmp_reg_308 <= ap_reg_pp0_iter38_icmp_reg_308;
                ap_reg_pp0_iter3_icmp4_reg_312 <= ap_reg_pp0_iter2_icmp4_reg_312;
                ap_reg_pp0_iter3_icmp_reg_308 <= ap_reg_pp0_iter2_icmp_reg_308;
                ap_reg_pp0_iter40_icmp4_reg_312 <= ap_reg_pp0_iter39_icmp4_reg_312;
                ap_reg_pp0_iter40_icmp_reg_308 <= ap_reg_pp0_iter39_icmp_reg_308;
                ap_reg_pp0_iter41_icmp4_reg_312 <= ap_reg_pp0_iter40_icmp4_reg_312;
                ap_reg_pp0_iter41_icmp_reg_308 <= ap_reg_pp0_iter40_icmp_reg_308;
                ap_reg_pp0_iter42_icmp4_reg_312 <= ap_reg_pp0_iter41_icmp4_reg_312;
                ap_reg_pp0_iter42_icmp_reg_308 <= ap_reg_pp0_iter41_icmp_reg_308;
                ap_reg_pp0_iter43_icmp4_reg_312 <= ap_reg_pp0_iter42_icmp4_reg_312;
                ap_reg_pp0_iter43_icmp_reg_308 <= ap_reg_pp0_iter42_icmp_reg_308;
                ap_reg_pp0_iter44_icmp4_reg_312 <= ap_reg_pp0_iter43_icmp4_reg_312;
                ap_reg_pp0_iter44_icmp_reg_308 <= ap_reg_pp0_iter43_icmp_reg_308;
                ap_reg_pp0_iter45_icmp4_reg_312 <= ap_reg_pp0_iter44_icmp4_reg_312;
                ap_reg_pp0_iter45_icmp_reg_308 <= ap_reg_pp0_iter44_icmp_reg_308;
                ap_reg_pp0_iter46_icmp4_reg_312 <= ap_reg_pp0_iter45_icmp4_reg_312;
                ap_reg_pp0_iter46_icmp_reg_308 <= ap_reg_pp0_iter45_icmp_reg_308;
                ap_reg_pp0_iter47_icmp4_reg_312 <= ap_reg_pp0_iter46_icmp4_reg_312;
                ap_reg_pp0_iter47_icmp_reg_308 <= ap_reg_pp0_iter46_icmp_reg_308;
                ap_reg_pp0_iter48_icmp4_reg_312 <= ap_reg_pp0_iter47_icmp4_reg_312;
                ap_reg_pp0_iter48_icmp_reg_308 <= ap_reg_pp0_iter47_icmp_reg_308;
                ap_reg_pp0_iter49_icmp4_reg_312 <= ap_reg_pp0_iter48_icmp4_reg_312;
                ap_reg_pp0_iter49_icmp_reg_308 <= ap_reg_pp0_iter48_icmp_reg_308;
                ap_reg_pp0_iter4_icmp4_reg_312 <= ap_reg_pp0_iter3_icmp4_reg_312;
                ap_reg_pp0_iter4_icmp_reg_308 <= ap_reg_pp0_iter3_icmp_reg_308;
                ap_reg_pp0_iter50_icmp4_reg_312 <= ap_reg_pp0_iter49_icmp4_reg_312;
                ap_reg_pp0_iter50_icmp_reg_308 <= ap_reg_pp0_iter49_icmp_reg_308;
                ap_reg_pp0_iter51_icmp4_reg_312 <= ap_reg_pp0_iter50_icmp4_reg_312;
                ap_reg_pp0_iter51_icmp_reg_308 <= ap_reg_pp0_iter50_icmp_reg_308;
                ap_reg_pp0_iter52_icmp4_reg_312 <= ap_reg_pp0_iter51_icmp4_reg_312;
                ap_reg_pp0_iter52_icmp_reg_308 <= ap_reg_pp0_iter51_icmp_reg_308;
                ap_reg_pp0_iter53_icmp4_reg_312 <= ap_reg_pp0_iter52_icmp4_reg_312;
                ap_reg_pp0_iter53_icmp_reg_308 <= ap_reg_pp0_iter52_icmp_reg_308;
                ap_reg_pp0_iter54_icmp4_reg_312 <= ap_reg_pp0_iter53_icmp4_reg_312;
                ap_reg_pp0_iter54_icmp_reg_308 <= ap_reg_pp0_iter53_icmp_reg_308;
                ap_reg_pp0_iter55_icmp4_reg_312 <= ap_reg_pp0_iter54_icmp4_reg_312;
                ap_reg_pp0_iter55_icmp_reg_308 <= ap_reg_pp0_iter54_icmp_reg_308;
                ap_reg_pp0_iter56_icmp4_reg_312 <= ap_reg_pp0_iter55_icmp4_reg_312;
                ap_reg_pp0_iter56_icmp_reg_308 <= ap_reg_pp0_iter55_icmp_reg_308;
                ap_reg_pp0_iter57_icmp4_reg_312 <= ap_reg_pp0_iter56_icmp4_reg_312;
                ap_reg_pp0_iter57_icmp_reg_308 <= ap_reg_pp0_iter56_icmp_reg_308;
                ap_reg_pp0_iter58_icmp4_reg_312 <= ap_reg_pp0_iter57_icmp4_reg_312;
                ap_reg_pp0_iter58_icmp_reg_308 <= ap_reg_pp0_iter57_icmp_reg_308;
                ap_reg_pp0_iter59_icmp4_reg_312 <= ap_reg_pp0_iter58_icmp4_reg_312;
                ap_reg_pp0_iter59_icmp_reg_308 <= ap_reg_pp0_iter58_icmp_reg_308;
                ap_reg_pp0_iter5_icmp4_reg_312 <= ap_reg_pp0_iter4_icmp4_reg_312;
                ap_reg_pp0_iter5_icmp_reg_308 <= ap_reg_pp0_iter4_icmp_reg_308;
                ap_reg_pp0_iter60_icmp4_reg_312 <= ap_reg_pp0_iter59_icmp4_reg_312;
                ap_reg_pp0_iter60_icmp_reg_308 <= ap_reg_pp0_iter59_icmp_reg_308;
                ap_reg_pp0_iter61_icmp4_reg_312 <= ap_reg_pp0_iter60_icmp4_reg_312;
                ap_reg_pp0_iter61_icmp_reg_308 <= ap_reg_pp0_iter60_icmp_reg_308;
                ap_reg_pp0_iter62_icmp4_reg_312 <= ap_reg_pp0_iter61_icmp4_reg_312;
                ap_reg_pp0_iter62_icmp_reg_308 <= ap_reg_pp0_iter61_icmp_reg_308;
                ap_reg_pp0_iter63_icmp4_reg_312 <= ap_reg_pp0_iter62_icmp4_reg_312;
                ap_reg_pp0_iter63_icmp_reg_308 <= ap_reg_pp0_iter62_icmp_reg_308;
                ap_reg_pp0_iter64_icmp4_reg_312 <= ap_reg_pp0_iter63_icmp4_reg_312;
                ap_reg_pp0_iter64_icmp_reg_308 <= ap_reg_pp0_iter63_icmp_reg_308;
                ap_reg_pp0_iter65_icmp4_reg_312 <= ap_reg_pp0_iter64_icmp4_reg_312;
                ap_reg_pp0_iter65_icmp_reg_308 <= ap_reg_pp0_iter64_icmp_reg_308;
                ap_reg_pp0_iter66_icmp4_reg_312 <= ap_reg_pp0_iter65_icmp4_reg_312;
                ap_reg_pp0_iter66_icmp_reg_308 <= ap_reg_pp0_iter65_icmp_reg_308;
                ap_reg_pp0_iter67_icmp4_reg_312 <= ap_reg_pp0_iter66_icmp4_reg_312;
                ap_reg_pp0_iter6_icmp4_reg_312 <= ap_reg_pp0_iter5_icmp4_reg_312;
                ap_reg_pp0_iter6_icmp_reg_308 <= ap_reg_pp0_iter5_icmp_reg_308;
                ap_reg_pp0_iter7_icmp4_reg_312 <= ap_reg_pp0_iter6_icmp4_reg_312;
                ap_reg_pp0_iter7_icmp_reg_308 <= ap_reg_pp0_iter6_icmp_reg_308;
                ap_reg_pp0_iter8_icmp4_reg_312 <= ap_reg_pp0_iter7_icmp4_reg_312;
                ap_reg_pp0_iter8_icmp_reg_308 <= ap_reg_pp0_iter7_icmp_reg_308;
                ap_reg_pp0_iter9_icmp4_reg_312 <= ap_reg_pp0_iter8_icmp4_reg_312;
                ap_reg_pp0_iter9_icmp_reg_308 <= ap_reg_pp0_iter8_icmp_reg_308;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                arg_n_elements_reg_282 <= n_elements;
                    tmp_1_cast_reg_277(61 downto 0) <= tmp_1_cast_fu_187_p1(61 downto 0);
                    tmp_cast_reg_272(61 downto 0) <= tmp_cast_fu_173_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_3_fu_195_p2))) then
                    gmem_addr_1_reg_302(62 downto 0) <= arg_b_i_0_sum_cast_fu_230_p1(62 downto 0);
                    gmem_addr_reg_296(62 downto 0) <= arg_a_i_0_sum_cast_fu_215_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_3_reg_287 = ap_const_lv1_1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0))) then
                icmp4_reg_312 <= icmp4_fu_266_p2;
                icmp_reg_308 <= icmp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                p_reg2mem_0_i_i_reg_291 <= p_reg2mem_0_i_i_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                tmp_3_reg_287 <= tmp_3_fu_195_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_272(62) <= '0';
    tmp_1_cast_reg_277(62) <= '0';
    gmem_addr_reg_296(63) <= '0';
    gmem_addr_1_reg_302(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter67, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter68, tmp_3_fu_195_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter68) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_3_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter68) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_3_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state139;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state139 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter68, gmem_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter68) and (ap_const_logic_0 = gmem_RVALID));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter68, gmem_RVALID, ap_sig_ioackin_gmem_ARREADY, ap_block_state138_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter68) and ((ap_const_logic_0 = gmem_RVALID) or (ap_const_boolean_1 = ap_block_state138_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter68, gmem_RVALID, ap_sig_ioackin_gmem_ARREADY, ap_block_state138_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter68) and ((ap_const_logic_0 = gmem_RVALID) or (ap_const_boolean_1 = ap_block_state138_io))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter67, gmem_RVALID)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter67) and (ap_const_logic_0 = gmem_RVALID));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter67, gmem_RVALID, ap_block_state3_io, ap_block_state137_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter67) and ((ap_const_logic_0 = gmem_RVALID) or (ap_const_boolean_1 = ap_block_state137_io))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter67, gmem_RVALID, ap_block_state3_io, ap_block_state137_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter67) and ((ap_const_logic_0 = gmem_RVALID) or (ap_const_boolean_1 = ap_block_state137_io))));
    end process;

        ap_block_state100_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp0_stage1_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp0_stage1_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp0_stage1_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp0_stage1_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp0_stage1_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp0_stage1_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp0_stage1_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp0_stage1_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp0_stage1_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp0_stage1_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp0_stage1_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp0_stage1_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp0_stage1_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp0_stage1_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp0_stage1_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp0_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp0_stage1_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp0_stage0_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp0_stage1_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp0_stage0_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state135_pp0_stage1_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state136_pp0_stage0_iter67 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state137_io_assign_proc : process(ap_reg_pp0_iter66_icmp_reg_308, ap_sig_ioackin_pipe_a_TREADY)
    begin
                ap_block_state137_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter66_icmp_reg_308) and (ap_const_logic_0 = ap_sig_ioackin_pipe_a_TREADY));
    end process;


    ap_block_state137_pp0_stage1_iter67_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state137_pp0_stage1_iter67 <= (ap_const_logic_0 = gmem_RVALID);
    end process;


    ap_block_state138_io_assign_proc : process(ap_reg_pp0_iter67_icmp4_reg_312, ap_sig_ioackin_pipe_b_TREADY)
    begin
                ap_block_state138_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter67_icmp4_reg_312) and (ap_const_logic_0 = ap_sig_ioackin_pipe_b_TREADY));
    end process;


    ap_block_state138_pp0_stage0_iter68_assign_proc : process(gmem_RVALID)
    begin
                ap_block_state138_pp0_stage0_iter68 <= (ap_const_logic_0 = gmem_RVALID);
    end process;

        ap_block_state13_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(tmp_3_reg_287, ap_sig_ioackin_gmem_ARREADY)
    begin
                ap_block_state3_io <= ((tmp_3_reg_287 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage1_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage1_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage1_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage1_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage1_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage1_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage1_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage1_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage1_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage1_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage1_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage1_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage1_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage1_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage1_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage1_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage1_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage1_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage1_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage1_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage1_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage1_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage1_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp0_stage1_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp0_stage1_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1162_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter67, ap_reg_pp0_iter66_icmp_reg_308)
    begin
                ap_condition_1162 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter67) and (ap_const_lv1_1 = ap_reg_pp0_iter66_icmp_reg_308));
    end process;


    ap_condition_1166_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter68, ap_reg_pp0_iter67_icmp4_reg_312)
    begin
                ap_condition_1166 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter68) and (ap_const_lv1_1 = ap_reg_pp0_iter67_icmp4_reg_312));
    end process;


    ap_condition_883_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_3_reg_287, ap_block_pp0_stage1_01001)
    begin
                ap_condition_883 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_3_reg_287 = ap_const_lv1_1) and (ap_block_pp0_stage1_01001 = ap_const_boolean_0));
    end process;


    ap_condition_897_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_897 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_01001 = ap_const_boolean_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_3_fu_195_p2)
    begin
        if ((tmp_3_fu_195_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state139)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23) and (ap_const_logic_0 = ap_enable_reg_pp0_iter24) and (ap_const_logic_0 = ap_enable_reg_pp0_iter25) and (ap_const_logic_0 = ap_enable_reg_pp0_iter26) and (ap_const_logic_0 = ap_enable_reg_pp0_iter27) and (ap_const_logic_0 = ap_enable_reg_pp0_iter28) and (ap_const_logic_0 = ap_enable_reg_pp0_iter29) and (ap_const_logic_0 = ap_enable_reg_pp0_iter30) and (ap_const_logic_0 = ap_enable_reg_pp0_iter31) and (ap_const_logic_0 = ap_enable_reg_pp0_iter32) and (ap_const_logic_0 = ap_enable_reg_pp0_iter33) and (ap_const_logic_0 = ap_enable_reg_pp0_iter34) and (ap_const_logic_0 = ap_enable_reg_pp0_iter35) and (ap_const_logic_0 = ap_enable_reg_pp0_iter36) and (ap_const_logic_0 = ap_enable_reg_pp0_iter37) and (ap_const_logic_0 = ap_enable_reg_pp0_iter38) and (ap_const_logic_0 = ap_enable_reg_pp0_iter39) and (ap_const_logic_0 = ap_enable_reg_pp0_iter40) and (ap_const_logic_0 = ap_enable_reg_pp0_iter41) and (ap_const_logic_0 = ap_enable_reg_pp0_iter42) and (ap_const_logic_0 = ap_enable_reg_pp0_iter43) and (ap_const_logic_0 = ap_enable_reg_pp0_iter44) and (ap_const_logic_0 = ap_enable_reg_pp0_iter45) and (ap_const_logic_0 = ap_enable_reg_pp0_iter46) and (ap_const_logic_0 = ap_enable_reg_pp0_iter47) and (ap_const_logic_0 = ap_enable_reg_pp0_iter48) and (ap_const_logic_0 = ap_enable_reg_pp0_iter49) and (ap_const_logic_0 = ap_enable_reg_pp0_iter50) and (ap_const_logic_0 = ap_enable_reg_pp0_iter51) and (ap_const_logic_0 = ap_enable_reg_pp0_iter52) and (ap_const_logic_0 = ap_enable_reg_pp0_iter53) and (ap_const_logic_0 = ap_enable_reg_pp0_iter54) and (ap_const_logic_0 = ap_enable_reg_pp0_iter55) and (ap_const_logic_0 = ap_enable_reg_pp0_iter56) and (ap_const_logic_0 = ap_enable_reg_pp0_iter57) and (ap_const_logic_0 = ap_enable_reg_pp0_iter58) and (ap_const_logic_0 = ap_enable_reg_pp0_iter59) and (ap_const_logic_0 = ap_enable_reg_pp0_iter60) and (ap_const_logic_0 = ap_enable_reg_pp0_iter61) and (ap_const_logic_0 = ap_enable_reg_pp0_iter62) and (ap_const_logic_0 = ap_enable_reg_pp0_iter63) and (ap_const_logic_0 = ap_enable_reg_pp0_iter64) and (ap_const_logic_0 = ap_enable_reg_pp0_iter65) and (ap_const_logic_0 = ap_enable_reg_pp0_iter66) and (ap_const_logic_0 = ap_enable_reg_pp0_iter67) and (ap_const_logic_0 = ap_enable_reg_pp0_iter68))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state139)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state139)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_pipe_a_TREADY_assign_proc : process(pipe_a_TREADY, ap_reg_ioackin_pipe_a_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_pipe_a_TREADY)) then 
            ap_sig_ioackin_pipe_a_TREADY <= pipe_a_TREADY;
        else 
            ap_sig_ioackin_pipe_a_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_pipe_b_TREADY_assign_proc : process(pipe_b_TREADY, ap_reg_ioackin_pipe_b_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_pipe_b_TREADY)) then 
            ap_sig_ioackin_pipe_b_TREADY <= pipe_b_TREADY;
        else 
            ap_sig_ioackin_pipe_b_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    arg_a_i_0_sum_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arg_a_i_0_sum_fu_210_p2),64));
    arg_a_i_0_sum_fu_210_p2 <= std_logic_vector(unsigned(tmp_cast_reg_272) + unsigned(tmp_4_cast_fu_206_p1));
    arg_b_i_0_sum_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arg_b_i_0_sum_fu_225_p2),64));
    arg_b_i_0_sum_fu_225_p2 <= std_logic_vector(unsigned(tmp_1_cast_reg_277) + unsigned(tmp_4_cast_fu_206_p1));

    gmem_ARADDR_assign_proc : process(gmem_addr_reg_296, gmem_addr_1_reg_302, ap_reg_ioackin_gmem_ARREADY, ap_condition_883, ap_condition_897)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_condition_897 = ap_const_boolean_1)) then 
                gmem_ARADDR <= gmem_addr_1_reg_302;
            elsif ((ap_condition_883 = ap_const_boolean_1)) then 
                gmem_ARADDR <= gmem_addr_reg_296;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_3_reg_287, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_reg_ioackin_gmem_ARREADY, ap_block_pp0_stage1_01001, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_3_reg_287 = ap_const_lv1_1) and (ap_block_pp0_stage1_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY) and (ap_block_pp0_stage0_01001 = ap_const_boolean_0)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter67, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter68, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter67) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter68) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_3_reg_287, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1 = ap_const_boolean_0) and (tmp_3_reg_287 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter67, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter68)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter67)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter68)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_0_reg2mem9_0_i_i_cast_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg2mem9_0_i_i_phi_fu_156_p4),32));

    i_0_reg2mem9_0_i_i_phi_fu_156_p4_assign_proc : process(tmp_3_reg_287, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_0_reg2mem9_0_i_i_reg_152, p_reg2mem_0_i_i_reg_291)
    begin
        if (((tmp_3_reg_287 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            i_0_reg2mem9_0_i_i_phi_fu_156_p4 <= p_reg2mem_0_i_i_reg_291;
        else 
            i_0_reg2mem9_0_i_i_phi_fu_156_p4 <= i_0_reg2mem9_0_i_i_reg_152;
        end if; 
    end process;

    icmp4_fu_266_p2 <= "1" when (tmp_4_fu_256_p4 = ap_const_lv25_0) else "0";
    icmp_fu_250_p2 <= "1" when (tmp_2_fu_240_p4 = ap_const_lv25_0) else "0";
    p_reg2mem_0_i_i_fu_200_p2 <= std_logic_vector(unsigned(i_0_reg2mem9_0_i_i_phi_fu_156_p4) + unsigned(ap_const_lv31_1));
    pipe_a_TDATA <= gmem_RDATA;

    pipe_a_TDATA_blk_n_assign_proc : process(pipe_a_TREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter67, ap_reg_pp0_iter66_icmp_reg_308)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter67) and (ap_const_lv1_1 = ap_reg_pp0_iter66_icmp_reg_308))) then 
            pipe_a_TDATA_blk_n <= pipe_a_TREADY;
        else 
            pipe_a_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pipe_a_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter67, ap_reg_pp0_iter66_icmp_reg_308, ap_block_pp0_stage1_01001, ap_reg_ioackin_pipe_a_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter67) and (ap_const_lv1_1 = ap_reg_pp0_iter66_icmp_reg_308) and (ap_block_pp0_stage1_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_pipe_a_TREADY))) then 
            pipe_a_TVALID <= ap_const_logic_1;
        else 
            pipe_a_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    pipe_b_TDATA <= gmem_RDATA;

    pipe_b_TDATA_blk_n_assign_proc : process(pipe_b_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter68, ap_reg_pp0_iter67_icmp4_reg_312)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter68) and (ap_const_lv1_1 = ap_reg_pp0_iter67_icmp4_reg_312))) then 
            pipe_b_TDATA_blk_n <= pipe_b_TREADY;
        else 
            pipe_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pipe_b_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter68, ap_reg_pp0_iter67_icmp4_reg_312, ap_block_pp0_stage0_01001, ap_reg_ioackin_pipe_b_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter68) and (ap_const_lv1_1 = ap_reg_pp0_iter67_icmp4_reg_312) and (ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_pipe_b_TREADY))) then 
            pipe_b_TVALID <= ap_const_logic_1;
        else 
            pipe_b_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_177_p4),63));
    tmp_1_fu_177_p4 <= b(63 downto 2);
    tmp_2_fu_240_p4 <= pipe_a_count(31 downto 7);
    tmp_3_fu_195_p2 <= "1" when (signed(i_0_reg2mem9_0_i_i_cast_fu_191_p1) < signed(arg_n_elements_reg_282)) else "0";
    tmp_4_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg2mem9_0_i_i_phi_fu_156_p4),63));
    tmp_4_fu_256_p4 <= pipe_b_count(31 downto 7);
    tmp_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_163_p4),63));
    tmp_fu_163_p4 <= a(63 downto 2);
end behav;
