// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="krnl_read,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1418,HLS_SYN_LUT=1835}" *)

module krnl_read (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        pipe_a_TDATA,
        pipe_a_TVALID,
        pipe_a_TREADY,
        pipe_a_count,
        pipe_b_TDATA,
        pipe_b_TVALID,
        pipe_b_TREADY,
        pipe_b_count,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state139 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_TARGET_ADDR = 0;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] pipe_a_TDATA;
output   pipe_a_TVALID;
input   pipe_a_TREADY;
input  [31:0] pipe_a_count;
output  [31:0] pipe_b_TDATA;
output   pipe_b_TVALID;
input   pipe_b_TREADY;
input  [31:0] pipe_b_count;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg pipe_a_TVALID;
reg pipe_b_TVALID;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] a;
wire   [63:0] b;
wire   [31:0] n_elements;
wire   [63:0] p_xcl_gv_pipe_a;
wire   [63:0] p_xcl_gv_pipe_b;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] tmp_3_reg_287;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter67;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter68;
reg    pipe_a_TDATA_blk_n;
reg   [0:0] icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter66_icmp_reg_308;
reg    pipe_b_TDATA_blk_n;
reg   [0:0] icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter67_icmp4_reg_312;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] i_0_reg2mem9_0_i_i_reg_152;
wire   [62:0] tmp_cast_fu_173_p1;
reg   [62:0] tmp_cast_reg_272;
wire   [62:0] tmp_1_cast_fu_187_p1;
reg   [62:0] tmp_1_cast_reg_277;
reg   [31:0] arg_n_elements_reg_282;
wire   [0:0] tmp_3_fu_195_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_sig_ioackin_gmem_ARREADY;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state18_pp0_stage0_iter8;
wire    ap_block_state20_pp0_stage0_iter9;
wire    ap_block_state22_pp0_stage0_iter10;
wire    ap_block_state24_pp0_stage0_iter11;
wire    ap_block_state26_pp0_stage0_iter12;
wire    ap_block_state28_pp0_stage0_iter13;
wire    ap_block_state30_pp0_stage0_iter14;
wire    ap_block_state32_pp0_stage0_iter15;
wire    ap_block_state34_pp0_stage0_iter16;
wire    ap_block_state36_pp0_stage0_iter17;
wire    ap_block_state38_pp0_stage0_iter18;
wire    ap_block_state40_pp0_stage0_iter19;
wire    ap_block_state42_pp0_stage0_iter20;
wire    ap_block_state44_pp0_stage0_iter21;
wire    ap_block_state46_pp0_stage0_iter22;
wire    ap_block_state48_pp0_stage0_iter23;
wire    ap_block_state50_pp0_stage0_iter24;
wire    ap_block_state52_pp0_stage0_iter25;
wire    ap_block_state54_pp0_stage0_iter26;
wire    ap_block_state56_pp0_stage0_iter27;
wire    ap_block_state58_pp0_stage0_iter28;
wire    ap_block_state60_pp0_stage0_iter29;
wire    ap_block_state62_pp0_stage0_iter30;
wire    ap_block_state64_pp0_stage0_iter31;
wire    ap_block_state66_pp0_stage0_iter32;
wire    ap_block_state68_pp0_stage0_iter33;
wire    ap_block_state70_pp0_stage0_iter34;
wire    ap_block_state72_pp0_stage0_iter35;
wire    ap_block_state74_pp0_stage0_iter36;
wire    ap_block_state76_pp0_stage0_iter37;
wire    ap_block_state78_pp0_stage0_iter38;
wire    ap_block_state80_pp0_stage0_iter39;
wire    ap_block_state82_pp0_stage0_iter40;
wire    ap_block_state84_pp0_stage0_iter41;
wire    ap_block_state86_pp0_stage0_iter42;
wire    ap_block_state88_pp0_stage0_iter43;
wire    ap_block_state90_pp0_stage0_iter44;
wire    ap_block_state92_pp0_stage0_iter45;
wire    ap_block_state94_pp0_stage0_iter46;
wire    ap_block_state96_pp0_stage0_iter47;
wire    ap_block_state98_pp0_stage0_iter48;
wire    ap_block_state100_pp0_stage0_iter49;
wire    ap_block_state102_pp0_stage0_iter50;
wire    ap_block_state104_pp0_stage0_iter51;
wire    ap_block_state106_pp0_stage0_iter52;
wire    ap_block_state108_pp0_stage0_iter53;
wire    ap_block_state110_pp0_stage0_iter54;
wire    ap_block_state112_pp0_stage0_iter55;
wire    ap_block_state114_pp0_stage0_iter56;
wire    ap_block_state116_pp0_stage0_iter57;
wire    ap_block_state118_pp0_stage0_iter58;
wire    ap_block_state120_pp0_stage0_iter59;
wire    ap_block_state122_pp0_stage0_iter60;
wire    ap_block_state124_pp0_stage0_iter61;
wire    ap_block_state126_pp0_stage0_iter62;
wire    ap_block_state128_pp0_stage0_iter63;
wire    ap_block_state130_pp0_stage0_iter64;
wire    ap_block_state132_pp0_stage0_iter65;
wire    ap_block_state134_pp0_stage0_iter66;
wire    ap_block_state136_pp0_stage0_iter67;
reg    ap_block_state138_pp0_stage0_iter68;
reg    ap_sig_ioackin_pipe_b_TREADY;
reg    ap_block_state138_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] p_reg2mem_0_i_i_fu_200_p2;
reg   [30:0] p_reg2mem_0_i_i_reg_291;
reg   [63:0] gmem_addr_reg_296;
reg   [63:0] gmem_addr_1_reg_302;
wire   [0:0] icmp_fu_250_p2;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_state11_pp0_stage1_iter4;
wire    ap_block_state13_pp0_stage1_iter5;
wire    ap_block_state15_pp0_stage1_iter6;
wire    ap_block_state17_pp0_stage1_iter7;
wire    ap_block_state19_pp0_stage1_iter8;
wire    ap_block_state21_pp0_stage1_iter9;
wire    ap_block_state23_pp0_stage1_iter10;
wire    ap_block_state25_pp0_stage1_iter11;
wire    ap_block_state27_pp0_stage1_iter12;
wire    ap_block_state29_pp0_stage1_iter13;
wire    ap_block_state31_pp0_stage1_iter14;
wire    ap_block_state33_pp0_stage1_iter15;
wire    ap_block_state35_pp0_stage1_iter16;
wire    ap_block_state37_pp0_stage1_iter17;
wire    ap_block_state39_pp0_stage1_iter18;
wire    ap_block_state41_pp0_stage1_iter19;
wire    ap_block_state43_pp0_stage1_iter20;
wire    ap_block_state45_pp0_stage1_iter21;
wire    ap_block_state47_pp0_stage1_iter22;
wire    ap_block_state49_pp0_stage1_iter23;
wire    ap_block_state51_pp0_stage1_iter24;
wire    ap_block_state53_pp0_stage1_iter25;
wire    ap_block_state55_pp0_stage1_iter26;
wire    ap_block_state57_pp0_stage1_iter27;
wire    ap_block_state59_pp0_stage1_iter28;
wire    ap_block_state61_pp0_stage1_iter29;
wire    ap_block_state63_pp0_stage1_iter30;
wire    ap_block_state65_pp0_stage1_iter31;
wire    ap_block_state67_pp0_stage1_iter32;
wire    ap_block_state69_pp0_stage1_iter33;
wire    ap_block_state71_pp0_stage1_iter34;
wire    ap_block_state73_pp0_stage1_iter35;
wire    ap_block_state75_pp0_stage1_iter36;
wire    ap_block_state77_pp0_stage1_iter37;
wire    ap_block_state79_pp0_stage1_iter38;
wire    ap_block_state81_pp0_stage1_iter39;
wire    ap_block_state83_pp0_stage1_iter40;
wire    ap_block_state85_pp0_stage1_iter41;
wire    ap_block_state87_pp0_stage1_iter42;
wire    ap_block_state89_pp0_stage1_iter43;
wire    ap_block_state91_pp0_stage1_iter44;
wire    ap_block_state93_pp0_stage1_iter45;
wire    ap_block_state95_pp0_stage1_iter46;
wire    ap_block_state97_pp0_stage1_iter47;
wire    ap_block_state99_pp0_stage1_iter48;
wire    ap_block_state101_pp0_stage1_iter49;
wire    ap_block_state103_pp0_stage1_iter50;
wire    ap_block_state105_pp0_stage1_iter51;
wire    ap_block_state107_pp0_stage1_iter52;
wire    ap_block_state109_pp0_stage1_iter53;
wire    ap_block_state111_pp0_stage1_iter54;
wire    ap_block_state113_pp0_stage1_iter55;
wire    ap_block_state115_pp0_stage1_iter56;
wire    ap_block_state117_pp0_stage1_iter57;
wire    ap_block_state119_pp0_stage1_iter58;
wire    ap_block_state121_pp0_stage1_iter59;
wire    ap_block_state123_pp0_stage1_iter60;
wire    ap_block_state125_pp0_stage1_iter61;
wire    ap_block_state127_pp0_stage1_iter62;
wire    ap_block_state129_pp0_stage1_iter63;
wire    ap_block_state131_pp0_stage1_iter64;
wire    ap_block_state133_pp0_stage1_iter65;
wire    ap_block_state135_pp0_stage1_iter66;
reg    ap_block_state137_pp0_stage1_iter67;
reg    ap_sig_ioackin_pipe_a_TREADY;
reg    ap_block_state137_io;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] ap_reg_pp0_iter1_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter2_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter3_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter4_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter5_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter6_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter7_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter8_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter9_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter10_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter11_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter12_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter13_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter14_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter15_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter16_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter17_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter18_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter19_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter20_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter21_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter22_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter23_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter24_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter25_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter26_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter27_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter28_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter29_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter30_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter31_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter32_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter33_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter34_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter35_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter36_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter37_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter38_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter39_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter40_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter41_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter42_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter43_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter44_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter45_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter46_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter47_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter48_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter49_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter50_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter51_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter52_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter53_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter54_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter55_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter56_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter57_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter58_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter59_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter60_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter61_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter62_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter63_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter64_icmp_reg_308;
reg   [0:0] ap_reg_pp0_iter65_icmp_reg_308;
wire   [0:0] icmp4_fu_266_p2;
reg   [0:0] ap_reg_pp0_iter1_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter2_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter3_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter4_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter5_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter6_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter7_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter8_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter9_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter10_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter11_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter12_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter13_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter14_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter15_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter16_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter17_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter18_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter19_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter20_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter21_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter22_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter23_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter24_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter25_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter26_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter27_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter28_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter29_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter30_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter31_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter32_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter33_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter34_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter35_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter36_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter37_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter38_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter39_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter40_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter41_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter42_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter43_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter44_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter45_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter46_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter47_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter48_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter49_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter50_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter51_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter52_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter53_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter54_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter55_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter56_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter57_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter58_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter59_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter60_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter61_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter62_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter63_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter64_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter65_icmp4_reg_312;
reg   [0:0] ap_reg_pp0_iter66_icmp4_reg_312;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg   [30:0] i_0_reg2mem9_0_i_i_phi_fu_156_p4;
wire   [63:0] arg_a_i_0_sum_cast_fu_215_p1;
wire   [63:0] arg_b_i_0_sum_cast_fu_230_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_pipe_a_TREADY;
reg    ap_reg_ioackin_pipe_b_TREADY;
wire   [61:0] tmp_fu_163_p4;
wire   [61:0] tmp_1_fu_177_p4;
wire   [31:0] i_0_reg2mem9_0_i_i_cast_fu_191_p1;
wire   [62:0] tmp_4_cast_fu_206_p1;
wire   [62:0] arg_a_i_0_sum_fu_210_p2;
wire   [62:0] arg_b_i_0_sum_fu_225_p2;
wire   [24:0] tmp_2_fu_240_p4;
wire   [24:0] tmp_4_fu_256_p4;
wire    ap_CS_fsm_state139;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1162;
reg    ap_condition_1166;
reg    ap_condition_883;
reg    ap_condition_897;

// power-on initialization
initial begin
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_pipe_a_TREADY = 1'b0;
#0 ap_reg_ioackin_pipe_b_TREADY = 1'b0;
end

krnl_read_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
krnl_read_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .b(b),
    .n_elements(n_elements),
    .p_xcl_gv_pipe_a(p_xcl_gv_pipe_a),
    .p_xcl_gv_pipe_b(p_xcl_gv_pipe_b)
);

krnl_read_gmem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 133 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_GMEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
krnl_read_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0)))) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter68 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_287 == 1'd1) & (ap_block_pp0_stage1_11001 == 1'b0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_287 == 1'd1) & (1'b1 == gmem_ARREADY) & (ap_block_pp0_stage1_01001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == gmem_ARREADY) & (ap_block_pp0_stage0_01001 == 1'b0)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_pipe_a_TREADY <= 1'b0;
    end else begin
        if ((ap_condition_1162 == 1'b1)) begin
            if ((ap_block_pp0_stage1_11001 == 1'b0)) begin
                ap_reg_ioackin_pipe_a_TREADY <= 1'b0;
            end else if (((ap_block_pp0_stage1_01001 == 1'b0) & (1'b1 == pipe_a_TREADY))) begin
                ap_reg_ioackin_pipe_a_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_pipe_b_TREADY <= 1'b0;
    end else begin
        if ((ap_condition_1166 == 1'b1)) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_pipe_b_TREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == pipe_b_TREADY))) begin
                ap_reg_ioackin_pipe_b_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_287 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        i_0_reg2mem9_0_i_i_reg_152 <= p_reg2mem_0_i_i_reg_291;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg2mem9_0_i_i_reg_152 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        ap_reg_pp0_iter10_icmp4_reg_312 <= ap_reg_pp0_iter9_icmp4_reg_312;
        ap_reg_pp0_iter10_icmp_reg_308 <= ap_reg_pp0_iter9_icmp_reg_308;
        ap_reg_pp0_iter11_icmp4_reg_312 <= ap_reg_pp0_iter10_icmp4_reg_312;
        ap_reg_pp0_iter11_icmp_reg_308 <= ap_reg_pp0_iter10_icmp_reg_308;
        ap_reg_pp0_iter12_icmp4_reg_312 <= ap_reg_pp0_iter11_icmp4_reg_312;
        ap_reg_pp0_iter12_icmp_reg_308 <= ap_reg_pp0_iter11_icmp_reg_308;
        ap_reg_pp0_iter13_icmp4_reg_312 <= ap_reg_pp0_iter12_icmp4_reg_312;
        ap_reg_pp0_iter13_icmp_reg_308 <= ap_reg_pp0_iter12_icmp_reg_308;
        ap_reg_pp0_iter14_icmp4_reg_312 <= ap_reg_pp0_iter13_icmp4_reg_312;
        ap_reg_pp0_iter14_icmp_reg_308 <= ap_reg_pp0_iter13_icmp_reg_308;
        ap_reg_pp0_iter15_icmp4_reg_312 <= ap_reg_pp0_iter14_icmp4_reg_312;
        ap_reg_pp0_iter15_icmp_reg_308 <= ap_reg_pp0_iter14_icmp_reg_308;
        ap_reg_pp0_iter16_icmp4_reg_312 <= ap_reg_pp0_iter15_icmp4_reg_312;
        ap_reg_pp0_iter16_icmp_reg_308 <= ap_reg_pp0_iter15_icmp_reg_308;
        ap_reg_pp0_iter17_icmp4_reg_312 <= ap_reg_pp0_iter16_icmp4_reg_312;
        ap_reg_pp0_iter17_icmp_reg_308 <= ap_reg_pp0_iter16_icmp_reg_308;
        ap_reg_pp0_iter18_icmp4_reg_312 <= ap_reg_pp0_iter17_icmp4_reg_312;
        ap_reg_pp0_iter18_icmp_reg_308 <= ap_reg_pp0_iter17_icmp_reg_308;
        ap_reg_pp0_iter19_icmp4_reg_312 <= ap_reg_pp0_iter18_icmp4_reg_312;
        ap_reg_pp0_iter19_icmp_reg_308 <= ap_reg_pp0_iter18_icmp_reg_308;
        ap_reg_pp0_iter1_icmp4_reg_312 <= icmp4_reg_312;
        ap_reg_pp0_iter1_icmp_reg_308 <= icmp_reg_308;
        ap_reg_pp0_iter20_icmp4_reg_312 <= ap_reg_pp0_iter19_icmp4_reg_312;
        ap_reg_pp0_iter20_icmp_reg_308 <= ap_reg_pp0_iter19_icmp_reg_308;
        ap_reg_pp0_iter21_icmp4_reg_312 <= ap_reg_pp0_iter20_icmp4_reg_312;
        ap_reg_pp0_iter21_icmp_reg_308 <= ap_reg_pp0_iter20_icmp_reg_308;
        ap_reg_pp0_iter22_icmp4_reg_312 <= ap_reg_pp0_iter21_icmp4_reg_312;
        ap_reg_pp0_iter22_icmp_reg_308 <= ap_reg_pp0_iter21_icmp_reg_308;
        ap_reg_pp0_iter23_icmp4_reg_312 <= ap_reg_pp0_iter22_icmp4_reg_312;
        ap_reg_pp0_iter23_icmp_reg_308 <= ap_reg_pp0_iter22_icmp_reg_308;
        ap_reg_pp0_iter24_icmp4_reg_312 <= ap_reg_pp0_iter23_icmp4_reg_312;
        ap_reg_pp0_iter24_icmp_reg_308 <= ap_reg_pp0_iter23_icmp_reg_308;
        ap_reg_pp0_iter25_icmp4_reg_312 <= ap_reg_pp0_iter24_icmp4_reg_312;
        ap_reg_pp0_iter25_icmp_reg_308 <= ap_reg_pp0_iter24_icmp_reg_308;
        ap_reg_pp0_iter26_icmp4_reg_312 <= ap_reg_pp0_iter25_icmp4_reg_312;
        ap_reg_pp0_iter26_icmp_reg_308 <= ap_reg_pp0_iter25_icmp_reg_308;
        ap_reg_pp0_iter27_icmp4_reg_312 <= ap_reg_pp0_iter26_icmp4_reg_312;
        ap_reg_pp0_iter27_icmp_reg_308 <= ap_reg_pp0_iter26_icmp_reg_308;
        ap_reg_pp0_iter28_icmp4_reg_312 <= ap_reg_pp0_iter27_icmp4_reg_312;
        ap_reg_pp0_iter28_icmp_reg_308 <= ap_reg_pp0_iter27_icmp_reg_308;
        ap_reg_pp0_iter29_icmp4_reg_312 <= ap_reg_pp0_iter28_icmp4_reg_312;
        ap_reg_pp0_iter29_icmp_reg_308 <= ap_reg_pp0_iter28_icmp_reg_308;
        ap_reg_pp0_iter2_icmp4_reg_312 <= ap_reg_pp0_iter1_icmp4_reg_312;
        ap_reg_pp0_iter2_icmp_reg_308 <= ap_reg_pp0_iter1_icmp_reg_308;
        ap_reg_pp0_iter30_icmp4_reg_312 <= ap_reg_pp0_iter29_icmp4_reg_312;
        ap_reg_pp0_iter30_icmp_reg_308 <= ap_reg_pp0_iter29_icmp_reg_308;
        ap_reg_pp0_iter31_icmp4_reg_312 <= ap_reg_pp0_iter30_icmp4_reg_312;
        ap_reg_pp0_iter31_icmp_reg_308 <= ap_reg_pp0_iter30_icmp_reg_308;
        ap_reg_pp0_iter32_icmp4_reg_312 <= ap_reg_pp0_iter31_icmp4_reg_312;
        ap_reg_pp0_iter32_icmp_reg_308 <= ap_reg_pp0_iter31_icmp_reg_308;
        ap_reg_pp0_iter33_icmp4_reg_312 <= ap_reg_pp0_iter32_icmp4_reg_312;
        ap_reg_pp0_iter33_icmp_reg_308 <= ap_reg_pp0_iter32_icmp_reg_308;
        ap_reg_pp0_iter34_icmp4_reg_312 <= ap_reg_pp0_iter33_icmp4_reg_312;
        ap_reg_pp0_iter34_icmp_reg_308 <= ap_reg_pp0_iter33_icmp_reg_308;
        ap_reg_pp0_iter35_icmp4_reg_312 <= ap_reg_pp0_iter34_icmp4_reg_312;
        ap_reg_pp0_iter35_icmp_reg_308 <= ap_reg_pp0_iter34_icmp_reg_308;
        ap_reg_pp0_iter36_icmp4_reg_312 <= ap_reg_pp0_iter35_icmp4_reg_312;
        ap_reg_pp0_iter36_icmp_reg_308 <= ap_reg_pp0_iter35_icmp_reg_308;
        ap_reg_pp0_iter37_icmp4_reg_312 <= ap_reg_pp0_iter36_icmp4_reg_312;
        ap_reg_pp0_iter37_icmp_reg_308 <= ap_reg_pp0_iter36_icmp_reg_308;
        ap_reg_pp0_iter38_icmp4_reg_312 <= ap_reg_pp0_iter37_icmp4_reg_312;
        ap_reg_pp0_iter38_icmp_reg_308 <= ap_reg_pp0_iter37_icmp_reg_308;
        ap_reg_pp0_iter39_icmp4_reg_312 <= ap_reg_pp0_iter38_icmp4_reg_312;
        ap_reg_pp0_iter39_icmp_reg_308 <= ap_reg_pp0_iter38_icmp_reg_308;
        ap_reg_pp0_iter3_icmp4_reg_312 <= ap_reg_pp0_iter2_icmp4_reg_312;
        ap_reg_pp0_iter3_icmp_reg_308 <= ap_reg_pp0_iter2_icmp_reg_308;
        ap_reg_pp0_iter40_icmp4_reg_312 <= ap_reg_pp0_iter39_icmp4_reg_312;
        ap_reg_pp0_iter40_icmp_reg_308 <= ap_reg_pp0_iter39_icmp_reg_308;
        ap_reg_pp0_iter41_icmp4_reg_312 <= ap_reg_pp0_iter40_icmp4_reg_312;
        ap_reg_pp0_iter41_icmp_reg_308 <= ap_reg_pp0_iter40_icmp_reg_308;
        ap_reg_pp0_iter42_icmp4_reg_312 <= ap_reg_pp0_iter41_icmp4_reg_312;
        ap_reg_pp0_iter42_icmp_reg_308 <= ap_reg_pp0_iter41_icmp_reg_308;
        ap_reg_pp0_iter43_icmp4_reg_312 <= ap_reg_pp0_iter42_icmp4_reg_312;
        ap_reg_pp0_iter43_icmp_reg_308 <= ap_reg_pp0_iter42_icmp_reg_308;
        ap_reg_pp0_iter44_icmp4_reg_312 <= ap_reg_pp0_iter43_icmp4_reg_312;
        ap_reg_pp0_iter44_icmp_reg_308 <= ap_reg_pp0_iter43_icmp_reg_308;
        ap_reg_pp0_iter45_icmp4_reg_312 <= ap_reg_pp0_iter44_icmp4_reg_312;
        ap_reg_pp0_iter45_icmp_reg_308 <= ap_reg_pp0_iter44_icmp_reg_308;
        ap_reg_pp0_iter46_icmp4_reg_312 <= ap_reg_pp0_iter45_icmp4_reg_312;
        ap_reg_pp0_iter46_icmp_reg_308 <= ap_reg_pp0_iter45_icmp_reg_308;
        ap_reg_pp0_iter47_icmp4_reg_312 <= ap_reg_pp0_iter46_icmp4_reg_312;
        ap_reg_pp0_iter47_icmp_reg_308 <= ap_reg_pp0_iter46_icmp_reg_308;
        ap_reg_pp0_iter48_icmp4_reg_312 <= ap_reg_pp0_iter47_icmp4_reg_312;
        ap_reg_pp0_iter48_icmp_reg_308 <= ap_reg_pp0_iter47_icmp_reg_308;
        ap_reg_pp0_iter49_icmp4_reg_312 <= ap_reg_pp0_iter48_icmp4_reg_312;
        ap_reg_pp0_iter49_icmp_reg_308 <= ap_reg_pp0_iter48_icmp_reg_308;
        ap_reg_pp0_iter4_icmp4_reg_312 <= ap_reg_pp0_iter3_icmp4_reg_312;
        ap_reg_pp0_iter4_icmp_reg_308 <= ap_reg_pp0_iter3_icmp_reg_308;
        ap_reg_pp0_iter50_icmp4_reg_312 <= ap_reg_pp0_iter49_icmp4_reg_312;
        ap_reg_pp0_iter50_icmp_reg_308 <= ap_reg_pp0_iter49_icmp_reg_308;
        ap_reg_pp0_iter51_icmp4_reg_312 <= ap_reg_pp0_iter50_icmp4_reg_312;
        ap_reg_pp0_iter51_icmp_reg_308 <= ap_reg_pp0_iter50_icmp_reg_308;
        ap_reg_pp0_iter52_icmp4_reg_312 <= ap_reg_pp0_iter51_icmp4_reg_312;
        ap_reg_pp0_iter52_icmp_reg_308 <= ap_reg_pp0_iter51_icmp_reg_308;
        ap_reg_pp0_iter53_icmp4_reg_312 <= ap_reg_pp0_iter52_icmp4_reg_312;
        ap_reg_pp0_iter53_icmp_reg_308 <= ap_reg_pp0_iter52_icmp_reg_308;
        ap_reg_pp0_iter54_icmp4_reg_312 <= ap_reg_pp0_iter53_icmp4_reg_312;
        ap_reg_pp0_iter54_icmp_reg_308 <= ap_reg_pp0_iter53_icmp_reg_308;
        ap_reg_pp0_iter55_icmp4_reg_312 <= ap_reg_pp0_iter54_icmp4_reg_312;
        ap_reg_pp0_iter55_icmp_reg_308 <= ap_reg_pp0_iter54_icmp_reg_308;
        ap_reg_pp0_iter56_icmp4_reg_312 <= ap_reg_pp0_iter55_icmp4_reg_312;
        ap_reg_pp0_iter56_icmp_reg_308 <= ap_reg_pp0_iter55_icmp_reg_308;
        ap_reg_pp0_iter57_icmp4_reg_312 <= ap_reg_pp0_iter56_icmp4_reg_312;
        ap_reg_pp0_iter57_icmp_reg_308 <= ap_reg_pp0_iter56_icmp_reg_308;
        ap_reg_pp0_iter58_icmp4_reg_312 <= ap_reg_pp0_iter57_icmp4_reg_312;
        ap_reg_pp0_iter58_icmp_reg_308 <= ap_reg_pp0_iter57_icmp_reg_308;
        ap_reg_pp0_iter59_icmp4_reg_312 <= ap_reg_pp0_iter58_icmp4_reg_312;
        ap_reg_pp0_iter59_icmp_reg_308 <= ap_reg_pp0_iter58_icmp_reg_308;
        ap_reg_pp0_iter5_icmp4_reg_312 <= ap_reg_pp0_iter4_icmp4_reg_312;
        ap_reg_pp0_iter5_icmp_reg_308 <= ap_reg_pp0_iter4_icmp_reg_308;
        ap_reg_pp0_iter60_icmp4_reg_312 <= ap_reg_pp0_iter59_icmp4_reg_312;
        ap_reg_pp0_iter60_icmp_reg_308 <= ap_reg_pp0_iter59_icmp_reg_308;
        ap_reg_pp0_iter61_icmp4_reg_312 <= ap_reg_pp0_iter60_icmp4_reg_312;
        ap_reg_pp0_iter61_icmp_reg_308 <= ap_reg_pp0_iter60_icmp_reg_308;
        ap_reg_pp0_iter62_icmp4_reg_312 <= ap_reg_pp0_iter61_icmp4_reg_312;
        ap_reg_pp0_iter62_icmp_reg_308 <= ap_reg_pp0_iter61_icmp_reg_308;
        ap_reg_pp0_iter63_icmp4_reg_312 <= ap_reg_pp0_iter62_icmp4_reg_312;
        ap_reg_pp0_iter63_icmp_reg_308 <= ap_reg_pp0_iter62_icmp_reg_308;
        ap_reg_pp0_iter64_icmp4_reg_312 <= ap_reg_pp0_iter63_icmp4_reg_312;
        ap_reg_pp0_iter64_icmp_reg_308 <= ap_reg_pp0_iter63_icmp_reg_308;
        ap_reg_pp0_iter65_icmp4_reg_312 <= ap_reg_pp0_iter64_icmp4_reg_312;
        ap_reg_pp0_iter65_icmp_reg_308 <= ap_reg_pp0_iter64_icmp_reg_308;
        ap_reg_pp0_iter66_icmp4_reg_312 <= ap_reg_pp0_iter65_icmp4_reg_312;
        ap_reg_pp0_iter66_icmp_reg_308 <= ap_reg_pp0_iter65_icmp_reg_308;
        ap_reg_pp0_iter67_icmp4_reg_312 <= ap_reg_pp0_iter66_icmp4_reg_312;
        ap_reg_pp0_iter6_icmp4_reg_312 <= ap_reg_pp0_iter5_icmp4_reg_312;
        ap_reg_pp0_iter6_icmp_reg_308 <= ap_reg_pp0_iter5_icmp_reg_308;
        ap_reg_pp0_iter7_icmp4_reg_312 <= ap_reg_pp0_iter6_icmp4_reg_312;
        ap_reg_pp0_iter7_icmp_reg_308 <= ap_reg_pp0_iter6_icmp_reg_308;
        ap_reg_pp0_iter8_icmp4_reg_312 <= ap_reg_pp0_iter7_icmp4_reg_312;
        ap_reg_pp0_iter8_icmp_reg_308 <= ap_reg_pp0_iter7_icmp_reg_308;
        ap_reg_pp0_iter9_icmp4_reg_312 <= ap_reg_pp0_iter8_icmp4_reg_312;
        ap_reg_pp0_iter9_icmp_reg_308 <= ap_reg_pp0_iter8_icmp_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        arg_n_elements_reg_282 <= n_elements;
        tmp_1_cast_reg_277[61 : 0] <= tmp_1_cast_fu_187_p1[61 : 0];
        tmp_cast_reg_272[61 : 0] <= tmp_cast_fu_173_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_3_fu_195_p2))) begin
        gmem_addr_1_reg_302[62 : 0] <= arg_b_i_0_sum_cast_fu_230_p1[62 : 0];
        gmem_addr_reg_296[62 : 0] <= arg_a_i_0_sum_cast_fu_215_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_reg_287 == 1'd1) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        icmp4_reg_312 <= icmp4_fu_266_p2;
        icmp_reg_308 <= icmp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        p_reg2mem_0_i_i_reg_291 <= p_reg2mem_0_i_i_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        tmp_3_reg_287 <= tmp_3_fu_195_p2;
    end
end

always @ (*) begin
    if ((tmp_3_fu_195_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter15) & (1'b0 == ap_enable_reg_pp0_iter16) & (1'b0 == ap_enable_reg_pp0_iter17) & (1'b0 == ap_enable_reg_pp0_iter18) & (1'b0 == ap_enable_reg_pp0_iter19) & (1'b0 == ap_enable_reg_pp0_iter20) & (1'b0 == ap_enable_reg_pp0_iter21) & (1'b0 == ap_enable_reg_pp0_iter22) & (1'b0 == ap_enable_reg_pp0_iter23) & (1'b0 == ap_enable_reg_pp0_iter24) & (1'b0 == ap_enable_reg_pp0_iter25) & (1'b0 == ap_enable_reg_pp0_iter26) & (1'b0 == ap_enable_reg_pp0_iter27) & (1'b0 == ap_enable_reg_pp0_iter28) & (1'b0 == ap_enable_reg_pp0_iter29) & (1'b0 == ap_enable_reg_pp0_iter30) & (1'b0 == ap_enable_reg_pp0_iter31) & (1'b0 == ap_enable_reg_pp0_iter32) & (1'b0 == ap_enable_reg_pp0_iter33) & (1'b0 == ap_enable_reg_pp0_iter34) & (1'b0 == ap_enable_reg_pp0_iter35) & (1'b0 == ap_enable_reg_pp0_iter36) & (1'b0 == ap_enable_reg_pp0_iter37) & (1'b0 == ap_enable_reg_pp0_iter38) & (1'b0 == ap_enable_reg_pp0_iter39) & (1'b0 == ap_enable_reg_pp0_iter40) & (1'b0 == ap_enable_reg_pp0_iter41) & (1'b0 == ap_enable_reg_pp0_iter42) & (1'b0 == ap_enable_reg_pp0_iter43) & (1'b0 == ap_enable_reg_pp0_iter44) & (1'b0 == ap_enable_reg_pp0_iter45) & (1'b0 == ap_enable_reg_pp0_iter46) & (1'b0 == ap_enable_reg_pp0_iter47) & (1'b0 == ap_enable_reg_pp0_iter48) & (1'b0 == ap_enable_reg_pp0_iter49) & (1'b0 == ap_enable_reg_pp0_iter50) & (1'b0 == ap_enable_reg_pp0_iter51) & (1'b0 == ap_enable_reg_pp0_iter52) & (1'b0 == ap_enable_reg_pp0_iter53) & (1'b0 == ap_enable_reg_pp0_iter54) & (1'b0 == ap_enable_reg_pp0_iter55) & (1'b0 == ap_enable_reg_pp0_iter56) & (1'b0 == ap_enable_reg_pp0_iter57) & (1'b0 == ap_enable_reg_pp0_iter58) & (1'b0 == ap_enable_reg_pp0_iter59) & (1'b0 == ap_enable_reg_pp0_iter60) & (1'b0 == ap_enable_reg_pp0_iter61) & (1'b0 == ap_enable_reg_pp0_iter62) & (1'b0 == ap_enable_reg_pp0_iter63) & (1'b0 == ap_enable_reg_pp0_iter64) & (1'b0 == ap_enable_reg_pp0_iter65) & (1'b0 == ap_enable_reg_pp0_iter66) & (1'b0 == ap_enable_reg_pp0_iter67) & (1'b0 == ap_enable_reg_pp0_iter68))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_pipe_a_TREADY)) begin
        ap_sig_ioackin_pipe_a_TREADY = pipe_a_TREADY;
    end else begin
        ap_sig_ioackin_pipe_a_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_pipe_b_TREADY)) begin
        ap_sig_ioackin_pipe_b_TREADY = pipe_b_TREADY;
    end else begin
        ap_sig_ioackin_pipe_b_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((ap_condition_897 == 1'b1)) begin
            gmem_ARADDR = gmem_addr_1_reg_302;
        end else if ((ap_condition_883 == 1'b1)) begin
            gmem_ARADDR = gmem_addr_reg_296;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_287 == 1'd1) & (ap_block_pp0_stage1_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_reg_ioackin_gmem_ARREADY) & (ap_block_pp0_stage0_01001 == 1'b0)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter67) & (ap_block_pp0_stage1_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter68) & (ap_block_pp0_stage0_11001 == 1'b0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1 == 1'b0) & (tmp_3_reg_287 == 1'd1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter67)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter68)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_3_reg_287 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        i_0_reg2mem9_0_i_i_phi_fu_156_p4 = p_reg2mem_0_i_i_reg_291;
    end else begin
        i_0_reg2mem9_0_i_i_phi_fu_156_p4 = i_0_reg2mem9_0_i_i_reg_152;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter67) & (1'd1 == ap_reg_pp0_iter66_icmp_reg_308))) begin
        pipe_a_TDATA_blk_n = pipe_a_TREADY;
    end else begin
        pipe_a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter67) & (1'd1 == ap_reg_pp0_iter66_icmp_reg_308) & (ap_block_pp0_stage1_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_pipe_a_TREADY))) begin
        pipe_a_TVALID = 1'b1;
    end else begin
        pipe_a_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter68) & (1'd1 == ap_reg_pp0_iter67_icmp4_reg_312))) begin
        pipe_b_TDATA_blk_n = pipe_b_TREADY;
    end else begin
        pipe_b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter68) & (1'd1 == ap_reg_pp0_iter67_icmp4_reg_312) & (ap_block_pp0_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_pipe_b_TREADY))) begin
        pipe_b_TVALID = 1'b1;
    end else begin
        pipe_b_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_subdone == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter68) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_3_fu_195_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter68) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_3_fu_195_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b1 == ap_enable_reg_pp0_iter68) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter68) & ((1'b0 == gmem_RVALID) | (1'b1 == ap_block_state138_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter68) & ((1'b0 == gmem_RVALID) | (1'b1 == ap_block_state138_io))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((1'b1 == ap_enable_reg_pp0_iter67) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_enable_reg_pp0_iter67) & ((1'b0 == gmem_RVALID) | (1'b1 == ap_block_state137_io))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_enable_reg_pp0_iter67) & ((1'b0 == gmem_RVALID) | (1'b1 == ap_block_state137_io))));
end

assign ap_block_state100_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage1_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage1_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage1_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage1_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage1_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage1_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage1_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage1_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage1_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage1_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp0_stage1_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp0_stage1_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp0_stage1_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp0_stage1_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp0_stage1_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp0_stage1_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp0_stage1_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp0_stage1_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state137_io = ((1'd1 == ap_reg_pp0_iter66_icmp_reg_308) & (1'b0 == ap_sig_ioackin_pipe_a_TREADY));
end

always @ (*) begin
    ap_block_state137_pp0_stage1_iter67 = (1'b0 == gmem_RVALID);
end

always @ (*) begin
    ap_block_state138_io = ((1'd1 == ap_reg_pp0_iter67_icmp4_reg_312) & (1'b0 == ap_sig_ioackin_pipe_b_TREADY));
end

always @ (*) begin
    ap_block_state138_pp0_stage0_iter68 = (1'b0 == gmem_RVALID);
end

assign ap_block_state13_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((tmp_3_reg_287 == 1'd1) & (1'b0 == ap_sig_ioackin_gmem_ARREADY));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage1_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage1_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage1_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage1_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage1_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage1_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage1_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage1_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage1_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage1_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage1_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage1_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage1_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage1_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage1_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage1_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage1_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage1_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage1_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage1_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage1_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage1_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage1_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1162 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter67) & (1'd1 == ap_reg_pp0_iter66_icmp_reg_308));
end

always @ (*) begin
    ap_condition_1166 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter68) & (1'd1 == ap_reg_pp0_iter67_icmp4_reg_312));
end

always @ (*) begin
    ap_condition_883 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_287 == 1'd1) & (ap_block_pp0_stage1_01001 == 1'b0));
end

always @ (*) begin
    ap_condition_897 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_01001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign arg_a_i_0_sum_cast_fu_215_p1 = arg_a_i_0_sum_fu_210_p2;

assign arg_a_i_0_sum_fu_210_p2 = (tmp_cast_reg_272 + tmp_4_cast_fu_206_p1);

assign arg_b_i_0_sum_cast_fu_230_p1 = arg_b_i_0_sum_fu_225_p2;

assign arg_b_i_0_sum_fu_225_p2 = (tmp_1_cast_reg_277 + tmp_4_cast_fu_206_p1);

assign i_0_reg2mem9_0_i_i_cast_fu_191_p1 = i_0_reg2mem9_0_i_i_phi_fu_156_p4;

assign icmp4_fu_266_p2 = ((tmp_4_fu_256_p4 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_fu_250_p2 = ((tmp_2_fu_240_p4 == 25'd0) ? 1'b1 : 1'b0);

assign p_reg2mem_0_i_i_fu_200_p2 = (i_0_reg2mem9_0_i_i_phi_fu_156_p4 + 31'd1);

assign pipe_a_TDATA = gmem_RDATA;

assign pipe_b_TDATA = gmem_RDATA;

assign tmp_1_cast_fu_187_p1 = tmp_1_fu_177_p4;

assign tmp_1_fu_177_p4 = {{b[63:2]}};

assign tmp_2_fu_240_p4 = {{pipe_a_count[31:7]}};

assign tmp_3_fu_195_p2 = (($signed(i_0_reg2mem9_0_i_i_cast_fu_191_p1) < $signed(arg_n_elements_reg_282)) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_206_p1 = i_0_reg2mem9_0_i_i_phi_fu_156_p4;

assign tmp_4_fu_256_p4 = {{pipe_b_count[31:7]}};

assign tmp_cast_fu_173_p1 = tmp_fu_163_p4;

assign tmp_fu_163_p4 = {{a[63:2]}};

always @ (posedge ap_clk) begin
    tmp_cast_reg_272[62] <= 1'b0;
    tmp_1_cast_reg_277[62] <= 1'b0;
    gmem_addr_reg_296[63] <= 1'b0;
    gmem_addr_1_reg_302[63] <= 1'b0;
end

endmodule //krnl_read
