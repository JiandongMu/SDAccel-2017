// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "krnl_adder.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic krnl_adder::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic krnl_adder::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> krnl_adder::ap_ST_fsm_state1 = "1";
const sc_lv<3> krnl_adder::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> krnl_adder::ap_ST_fsm_state4 = "100";
const sc_lv<32> krnl_adder::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool krnl_adder::ap_const_boolean_1 = true;
const sc_lv<32> krnl_adder::ap_const_lv32_1 = "1";
const bool krnl_adder::ap_const_boolean_0 = false;
const sc_lv<1> krnl_adder::ap_const_lv1_1 = "1";
const sc_lv<1> krnl_adder::ap_const_lv1_0 = "0";
const int krnl_adder::C_S_AXI_DATA_WIDTH = "100000";
const int krnl_adder::C_M_AXI_GMEM_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int krnl_adder::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int krnl_adder::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int krnl_adder::C_M_AXI_GMEM_CACHE_VALUE = "11";
const sc_lv<31> krnl_adder::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> krnl_adder::ap_const_lv31_1 = "1";
const sc_lv<32> krnl_adder::ap_const_lv32_1F = "11111";
const sc_lv<32> krnl_adder::ap_const_lv32_7 = "111";
const sc_lv<25> krnl_adder::ap_const_lv25_0 = "0000000000000000000000000";
const sc_lv<32> krnl_adder::ap_const_lv32_2 = "10";
const sc_lv<64> krnl_adder::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> krnl_adder::ap_const_lv8_0 = "00000000";
const sc_lv<3> krnl_adder::ap_const_lv3_0 = "000";
const sc_lv<2> krnl_adder::ap_const_lv2_0 = "00";
const sc_lv<4> krnl_adder::ap_const_lv4_0 = "0000";

krnl_adder::krnl_adder(sc_module_name name) : sc_module(name), mVcdFile(0) {
    krnl_adder_control_s_axi_U = new krnl_adder_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("krnl_adder_control_s_axi_U");
    krnl_adder_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    krnl_adder_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    krnl_adder_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    krnl_adder_control_s_axi_U->WVALID(s_axi_control_WVALID);
    krnl_adder_control_s_axi_U->WREADY(s_axi_control_WREADY);
    krnl_adder_control_s_axi_U->WDATA(s_axi_control_WDATA);
    krnl_adder_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    krnl_adder_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    krnl_adder_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    krnl_adder_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    krnl_adder_control_s_axi_U->RVALID(s_axi_control_RVALID);
    krnl_adder_control_s_axi_U->RREADY(s_axi_control_RREADY);
    krnl_adder_control_s_axi_U->RDATA(s_axi_control_RDATA);
    krnl_adder_control_s_axi_U->RRESP(s_axi_control_RRESP);
    krnl_adder_control_s_axi_U->BVALID(s_axi_control_BVALID);
    krnl_adder_control_s_axi_U->BREADY(s_axi_control_BREADY);
    krnl_adder_control_s_axi_U->BRESP(s_axi_control_BRESP);
    krnl_adder_control_s_axi_U->ACLK(ap_clk);
    krnl_adder_control_s_axi_U->ARESET(ap_rst_n_inv);
    krnl_adder_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    krnl_adder_control_s_axi_U->ap_start(ap_start);
    krnl_adder_control_s_axi_U->interrupt(interrupt);
    krnl_adder_control_s_axi_U->ap_ready(ap_ready);
    krnl_adder_control_s_axi_U->ap_done(ap_done);
    krnl_adder_control_s_axi_U->ap_idle(ap_idle);
    krnl_adder_control_s_axi_U->n_elements(n_elements);
    krnl_adder_control_s_axi_U->p_xcl_gv_pipe_a(p_xcl_gv_pipe_a);
    krnl_adder_control_s_axi_U->p_xcl_gv_pipe_b(p_xcl_gv_pipe_b);
    krnl_adder_control_s_axi_U->p_xcl_gv_pipe_c(p_xcl_gv_pipe_c);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( pipe_a_TVALID );
    sensitive << ( pipe_b_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op36_read_state2 );
    sensitive << ( ap_predicate_op41_read_state2 );
    sensitive << ( ap_predicate_op47_read_state2 );
    sensitive << ( ap_predicate_op52_read_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( pipe_a_TVALID );
    sensitive << ( pipe_b_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op36_read_state2 );
    sensitive << ( ap_predicate_op41_read_state2 );
    sensitive << ( ap_predicate_op47_read_state2 );
    sensitive << ( ap_predicate_op52_read_state2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( pipe_a_TVALID );
    sensitive << ( pipe_b_TVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op36_read_state2 );
    sensitive << ( ap_predicate_op41_read_state2 );
    sensitive << ( ap_predicate_op47_read_state2 );
    sensitive << ( ap_predicate_op52_read_state2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( pipe_a_TVALID );
    sensitive << ( pipe_b_TVALID );
    sensitive << ( ap_predicate_op36_read_state2 );
    sensitive << ( ap_predicate_op41_read_state2 );
    sensitive << ( ap_predicate_op47_read_state2 );
    sensitive << ( ap_predicate_op52_read_state2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( icmp8_reg_278 );
    sensitive << ( ap_sig_ioackin_pipe_c_TREADY );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_363);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp8_reg_278 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_1_fu_152_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op36_read_state2);
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp_fu_173_p2 );

    SC_METHOD(thread_ap_predicate_op41_read_state2);
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp_fu_173_p2 );
    sensitive << ( tmp_3_fu_179_p2 );

    SC_METHOD(thread_ap_predicate_op47_read_state2);
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp5_fu_195_p2 );

    SC_METHOD(thread_ap_predicate_op52_read_state2);
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp5_fu_195_p2 );
    sensitive << ( tmp_5_fu_201_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_sig_ioackin_pipe_c_TREADY);
    sensitive << ( pipe_c_TREADY );
    sensitive << ( ap_reg_ioackin_pipe_c_TREADY );

    SC_METHOD(thread_i_0_reg2mem10_0_i_i_cast_fu_148_p1);
    sensitive << ( i_0_reg2mem10_0_i_i_reg_127 );

    SC_METHOD(thread_icmp5_fu_195_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_2_fu_185_p4 );

    SC_METHOD(thread_icmp8_fu_217_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_4_fu_207_p4 );

    SC_METHOD(thread_icmp_fu_173_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_fu_163_p4 );

    SC_METHOD(thread_m_axi_gmem_ARADDR);

    SC_METHOD(thread_m_axi_gmem_ARBURST);

    SC_METHOD(thread_m_axi_gmem_ARCACHE);

    SC_METHOD(thread_m_axi_gmem_ARID);

    SC_METHOD(thread_m_axi_gmem_ARLEN);

    SC_METHOD(thread_m_axi_gmem_ARLOCK);

    SC_METHOD(thread_m_axi_gmem_ARPROT);

    SC_METHOD(thread_m_axi_gmem_ARQOS);

    SC_METHOD(thread_m_axi_gmem_ARREGION);

    SC_METHOD(thread_m_axi_gmem_ARSIZE);

    SC_METHOD(thread_m_axi_gmem_ARUSER);

    SC_METHOD(thread_m_axi_gmem_ARVALID);

    SC_METHOD(thread_m_axi_gmem_AWADDR);

    SC_METHOD(thread_m_axi_gmem_AWBURST);

    SC_METHOD(thread_m_axi_gmem_AWCACHE);

    SC_METHOD(thread_m_axi_gmem_AWID);

    SC_METHOD(thread_m_axi_gmem_AWLEN);

    SC_METHOD(thread_m_axi_gmem_AWLOCK);

    SC_METHOD(thread_m_axi_gmem_AWPROT);

    SC_METHOD(thread_m_axi_gmem_AWQOS);

    SC_METHOD(thread_m_axi_gmem_AWREGION);

    SC_METHOD(thread_m_axi_gmem_AWSIZE);

    SC_METHOD(thread_m_axi_gmem_AWUSER);

    SC_METHOD(thread_m_axi_gmem_AWVALID);

    SC_METHOD(thread_m_axi_gmem_BREADY);

    SC_METHOD(thread_m_axi_gmem_RREADY);

    SC_METHOD(thread_m_axi_gmem_WDATA);

    SC_METHOD(thread_m_axi_gmem_WID);

    SC_METHOD(thread_m_axi_gmem_WLAST);

    SC_METHOD(thread_m_axi_gmem_WSTRB);

    SC_METHOD(thread_m_axi_gmem_WUSER);

    SC_METHOD(thread_m_axi_gmem_WVALID);

    SC_METHOD(thread_p_reg2mem_0_i_i_fu_157_p2);
    sensitive << ( i_0_reg2mem10_0_i_i_reg_127 );

    SC_METHOD(thread_pipe_a_TDATA_blk_n);
    sensitive << ( pipe_a_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp_fu_173_p2 );
    sensitive << ( tmp_3_fu_179_p2 );

    SC_METHOD(thread_pipe_a_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op36_read_state2 );
    sensitive << ( ap_predicate_op41_read_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_pipe_b_TDATA_blk_n);
    sensitive << ( pipe_b_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp5_fu_195_p2 );
    sensitive << ( tmp_5_fu_201_p2 );

    SC_METHOD(thread_pipe_b_TREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_predicate_op47_read_state2 );
    sensitive << ( ap_predicate_op52_read_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_pipe_c_TDATA);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp8_reg_278 );
    sensitive << ( p_0_fu_76 );
    sensitive << ( p_01_fu_80 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_pipe_c_TDATA_blk_n);
    sensitive << ( pipe_c_TREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp8_reg_278 );

    SC_METHOD(thread_pipe_c_TVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp8_reg_278 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_pipe_c_TREADY );

    SC_METHOD(thread_tmp_1_fu_152_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( arg_n_elements_reg_248 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_0_reg2mem10_0_i_i_cast_fu_148_p1 );

    SC_METHOD(thread_tmp_2_fu_185_p4);
    sensitive << ( pipe_b_count );

    SC_METHOD(thread_tmp_3_fu_179_p2);
    sensitive << ( pipe_a_count );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp_fu_173_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_4_fu_207_p4);
    sensitive << ( pipe_c_count );

    SC_METHOD(thread_tmp_5_fu_201_p2);
    sensitive << ( pipe_b_count );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( icmp5_fu_195_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_fu_163_p4);
    sensitive << ( pipe_a_count );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_1_fu_152_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_rst_n_inv = SC_LOGIC_1;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_reg_ioackin_pipe_c_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "krnl_adder_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, pipe_a_TDATA, "(port)pipe_a_TDATA");
    sc_trace(mVcdFile, pipe_a_TVALID, "(port)pipe_a_TVALID");
    sc_trace(mVcdFile, pipe_a_TREADY, "(port)pipe_a_TREADY");
    sc_trace(mVcdFile, pipe_a_count, "(port)pipe_a_count");
    sc_trace(mVcdFile, pipe_b_TDATA, "(port)pipe_b_TDATA");
    sc_trace(mVcdFile, pipe_b_TVALID, "(port)pipe_b_TVALID");
    sc_trace(mVcdFile, pipe_b_TREADY, "(port)pipe_b_TREADY");
    sc_trace(mVcdFile, pipe_b_count, "(port)pipe_b_count");
    sc_trace(mVcdFile, pipe_c_TDATA, "(port)pipe_c_TDATA");
    sc_trace(mVcdFile, pipe_c_TVALID, "(port)pipe_c_TVALID");
    sc_trace(mVcdFile, pipe_c_TREADY, "(port)pipe_c_TREADY");
    sc_trace(mVcdFile, pipe_c_count, "(port)pipe_c_count");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, n_elements, "n_elements");
    sc_trace(mVcdFile, p_xcl_gv_pipe_a, "p_xcl_gv_pipe_a");
    sc_trace(mVcdFile, p_xcl_gv_pipe_b, "p_xcl_gv_pipe_b");
    sc_trace(mVcdFile, p_xcl_gv_pipe_c, "p_xcl_gv_pipe_c");
    sc_trace(mVcdFile, pipe_a_TDATA_blk_n, "pipe_a_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_1_fu_152_p2, "tmp_1_fu_152_p2");
    sc_trace(mVcdFile, icmp_fu_173_p2, "icmp_fu_173_p2");
    sc_trace(mVcdFile, tmp_3_fu_179_p2, "tmp_3_fu_179_p2");
    sc_trace(mVcdFile, pipe_b_TDATA_blk_n, "pipe_b_TDATA_blk_n");
    sc_trace(mVcdFile, icmp5_fu_195_p2, "icmp5_fu_195_p2");
    sc_trace(mVcdFile, tmp_5_fu_201_p2, "tmp_5_fu_201_p2");
    sc_trace(mVcdFile, pipe_c_TDATA_blk_n, "pipe_c_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp8_reg_278, "icmp8_reg_278");
    sc_trace(mVcdFile, i_0_reg2mem10_0_i_i_reg_127, "i_0_reg2mem10_0_i_i_reg_127");
    sc_trace(mVcdFile, arg_n_elements_reg_248, "arg_n_elements_reg_248");
    sc_trace(mVcdFile, ap_predicate_op36_read_state2, "ap_predicate_op36_read_state2");
    sc_trace(mVcdFile, ap_predicate_op41_read_state2, "ap_predicate_op41_read_state2");
    sc_trace(mVcdFile, ap_predicate_op47_read_state2, "ap_predicate_op47_read_state2");
    sc_trace(mVcdFile, ap_predicate_op52_read_state2, "ap_predicate_op52_read_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_pipe_c_TREADY, "ap_sig_ioackin_pipe_c_TREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, p_reg2mem_0_i_i_fu_157_p2, "p_reg2mem_0_i_i_fu_157_p2");
    sc_trace(mVcdFile, icmp8_fu_217_p2, "icmp8_fu_217_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, p_0_fu_76, "p_0_fu_76");
    sc_trace(mVcdFile, p_01_fu_80, "p_01_fu_80");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_pipe_c_TREADY, "ap_reg_ioackin_pipe_c_TREADY");
    sc_trace(mVcdFile, i_0_reg2mem10_0_i_i_cast_fu_148_p1, "i_0_reg2mem10_0_i_i_cast_fu_148_p1");
    sc_trace(mVcdFile, tmp_fu_163_p4, "tmp_fu_163_p4");
    sc_trace(mVcdFile, tmp_2_fu_185_p4, "tmp_2_fu_185_p4");
    sc_trace(mVcdFile, tmp_4_fu_207_p4, "tmp_4_fu_207_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_363, "ap_condition_363");
#endif

    }
    mHdltvinHandle.open("krnl_adder.hdltvin.dat");
    mHdltvoutHandle.open("krnl_adder.hdltvout.dat");
}

krnl_adder::~krnl_adder() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete krnl_adder_control_s_axi_U;
}

void krnl_adder::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void krnl_adder::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_pipe_c_TREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_363.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_pipe_c_TREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, pipe_c_TREADY.read()))) {
                ap_reg_ioackin_pipe_c_TREADY = ap_const_logic_1;
            }
        }
    }
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_reg2mem10_0_i_i_reg_127 = p_reg2mem_0_i_i_fu_157_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg2mem10_0_i_i_reg_127 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        arg_n_elements_reg_248 = n_elements.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp8_reg_278 = icmp8_fu_217_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_read_state2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_read_state2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        p_01_fu_80 = pipe_a_TDATA.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_read_state2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_read_state2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        p_0_fu_76 = pipe_b_TDATA.read();
    }
}

void krnl_adder::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void krnl_adder::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void krnl_adder::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void krnl_adder::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void krnl_adder::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_read_state2.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_read_state2.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_read_state2.read())) || 
  (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_read_state2.read()))));
}

void krnl_adder::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_read_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_read_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_read_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_read_state2.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())));
}

void krnl_adder::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_read_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_read_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_read_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_read_state2.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())));
}

void krnl_adder::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = ((esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_read_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, pipe_a_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_read_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_read_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, pipe_b_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_read_state2.read())));
}

void krnl_adder::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp8_reg_278.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_pipe_c_TREADY.read()));
}

void krnl_adder::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void krnl_adder::thread_ap_condition_363() {
    ap_condition_363 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp8_reg_278.read()));
}

void krnl_adder::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void krnl_adder::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void krnl_adder::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void krnl_adder::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void krnl_adder::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void krnl_adder::thread_ap_predicate_op36_read_state2() {
    ap_predicate_op36_read_state2 = (esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(icmp_fu_173_p2.read(), ap_const_lv1_0));
}

void krnl_adder::thread_ap_predicate_op41_read_state2() {
    ap_predicate_op41_read_state2 = (esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_173_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_179_p2.read()));
}

void krnl_adder::thread_ap_predicate_op47_read_state2() {
    ap_predicate_op47_read_state2 = (esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp5_fu_195_p2.read()));
}

void krnl_adder::thread_ap_predicate_op52_read_state2() {
    ap_predicate_op52_read_state2 = (esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp5_fu_195_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_201_p2.read()));
}

void krnl_adder::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void krnl_adder::thread_ap_sig_ioackin_pipe_c_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_pipe_c_TREADY.read())) {
        ap_sig_ioackin_pipe_c_TREADY = pipe_c_TREADY.read();
    } else {
        ap_sig_ioackin_pipe_c_TREADY = ap_const_logic_1;
    }
}

void krnl_adder::thread_i_0_reg2mem10_0_i_i_cast_fu_148_p1() {
    i_0_reg2mem10_0_i_i_cast_fu_148_p1 = esl_zext<32,31>(i_0_reg2mem10_0_i_i_reg_127.read());
}

void krnl_adder::thread_icmp5_fu_195_p2() {
    icmp5_fu_195_p2 = (!tmp_2_fu_185_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_185_p4.read() == ap_const_lv31_0);
}

void krnl_adder::thread_icmp8_fu_217_p2() {
    icmp8_fu_217_p2 = (!tmp_4_fu_207_p4.read().is_01() || !ap_const_lv25_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_207_p4.read() == ap_const_lv25_0);
}

void krnl_adder::thread_icmp_fu_173_p2() {
    icmp_fu_173_p2 = (!tmp_fu_163_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_163_p4.read() == ap_const_lv31_0);
}

void krnl_adder::thread_m_axi_gmem_ARADDR() {
    m_axi_gmem_ARADDR = ap_const_lv64_0;
}

void krnl_adder::thread_m_axi_gmem_ARBURST() {
    m_axi_gmem_ARBURST = ap_const_lv2_0;
}

void krnl_adder::thread_m_axi_gmem_ARCACHE() {
    m_axi_gmem_ARCACHE = ap_const_lv4_0;
}

void krnl_adder::thread_m_axi_gmem_ARID() {
    m_axi_gmem_ARID = ap_const_lv1_0;
}

void krnl_adder::thread_m_axi_gmem_ARLEN() {
    m_axi_gmem_ARLEN = ap_const_lv8_0;
}

void krnl_adder::thread_m_axi_gmem_ARLOCK() {
    m_axi_gmem_ARLOCK = ap_const_lv2_0;
}

void krnl_adder::thread_m_axi_gmem_ARPROT() {
    m_axi_gmem_ARPROT = ap_const_lv3_0;
}

void krnl_adder::thread_m_axi_gmem_ARQOS() {
    m_axi_gmem_ARQOS = ap_const_lv4_0;
}

void krnl_adder::thread_m_axi_gmem_ARREGION() {
    m_axi_gmem_ARREGION = ap_const_lv4_0;
}

void krnl_adder::thread_m_axi_gmem_ARSIZE() {
    m_axi_gmem_ARSIZE = ap_const_lv3_0;
}

void krnl_adder::thread_m_axi_gmem_ARUSER() {
    m_axi_gmem_ARUSER = ap_const_lv1_0;
}

void krnl_adder::thread_m_axi_gmem_ARVALID() {
    m_axi_gmem_ARVALID = ap_const_logic_0;
}

void krnl_adder::thread_m_axi_gmem_AWADDR() {
    m_axi_gmem_AWADDR = ap_const_lv64_0;
}

void krnl_adder::thread_m_axi_gmem_AWBURST() {
    m_axi_gmem_AWBURST = ap_const_lv2_0;
}

void krnl_adder::thread_m_axi_gmem_AWCACHE() {
    m_axi_gmem_AWCACHE = ap_const_lv4_0;
}

void krnl_adder::thread_m_axi_gmem_AWID() {
    m_axi_gmem_AWID = ap_const_lv1_0;
}

void krnl_adder::thread_m_axi_gmem_AWLEN() {
    m_axi_gmem_AWLEN = ap_const_lv8_0;
}

void krnl_adder::thread_m_axi_gmem_AWLOCK() {
    m_axi_gmem_AWLOCK = ap_const_lv2_0;
}

void krnl_adder::thread_m_axi_gmem_AWPROT() {
    m_axi_gmem_AWPROT = ap_const_lv3_0;
}

void krnl_adder::thread_m_axi_gmem_AWQOS() {
    m_axi_gmem_AWQOS = ap_const_lv4_0;
}

void krnl_adder::thread_m_axi_gmem_AWREGION() {
    m_axi_gmem_AWREGION = ap_const_lv4_0;
}

void krnl_adder::thread_m_axi_gmem_AWSIZE() {
    m_axi_gmem_AWSIZE = ap_const_lv3_0;
}

void krnl_adder::thread_m_axi_gmem_AWUSER() {
    m_axi_gmem_AWUSER = ap_const_lv1_0;
}

void krnl_adder::thread_m_axi_gmem_AWVALID() {
    m_axi_gmem_AWVALID = ap_const_logic_0;
}

void krnl_adder::thread_m_axi_gmem_BREADY() {
    m_axi_gmem_BREADY = ap_const_logic_0;
}

void krnl_adder::thread_m_axi_gmem_RREADY() {
    m_axi_gmem_RREADY = ap_const_logic_0;
}

void krnl_adder::thread_m_axi_gmem_WDATA() {
    m_axi_gmem_WDATA = ap_const_lv32_0;
}

void krnl_adder::thread_m_axi_gmem_WID() {
    m_axi_gmem_WID = ap_const_lv1_0;
}

void krnl_adder::thread_m_axi_gmem_WLAST() {
    m_axi_gmem_WLAST = ap_const_logic_0;
}

void krnl_adder::thread_m_axi_gmem_WSTRB() {
    m_axi_gmem_WSTRB = ap_const_lv4_0;
}

void krnl_adder::thread_m_axi_gmem_WUSER() {
    m_axi_gmem_WUSER = ap_const_lv1_0;
}

void krnl_adder::thread_m_axi_gmem_WVALID() {
    m_axi_gmem_WVALID = ap_const_logic_0;
}

void krnl_adder::thread_p_reg2mem_0_i_i_fu_157_p2() {
    p_reg2mem_0_i_i_fu_157_p2 = (!i_0_reg2mem10_0_i_i_reg_127.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_reg2mem10_0_i_i_reg_127.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void krnl_adder::thread_pipe_a_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(icmp_fu_173_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_fu_173_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_179_p2.read())))) {
        pipe_a_TDATA_blk_n = pipe_a_TVALID.read();
    } else {
        pipe_a_TDATA_blk_n = ap_const_logic_1;
    }
}

void krnl_adder::thread_pipe_a_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op36_read_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_read_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        pipe_a_TREADY = ap_const_logic_1;
    } else {
        pipe_a_TREADY = ap_const_logic_0;
    }
}

void krnl_adder::thread_pipe_b_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp5_fu_195_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp5_fu_195_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_201_p2.read())))) {
        pipe_b_TDATA_blk_n = pipe_b_TVALID.read();
    } else {
        pipe_b_TDATA_blk_n = ap_const_logic_1;
    }
}

void krnl_adder::thread_pipe_b_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_read_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op52_read_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        pipe_b_TREADY = ap_const_logic_1;
    } else {
        pipe_b_TREADY = ap_const_logic_0;
    }
}

void krnl_adder::thread_pipe_c_TDATA() {
    pipe_c_TDATA = (!p_01_fu_80.read().is_01() || !p_0_fu_76.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_01_fu_80.read()) + sc_biguint<32>(p_0_fu_76.read()));
}

void krnl_adder::thread_pipe_c_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp8_reg_278.read()))) {
        pipe_c_TDATA_blk_n = pipe_c_TREADY.read();
    } else {
        pipe_c_TDATA_blk_n = ap_const_logic_1;
    }
}

void krnl_adder::thread_pipe_c_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp8_reg_278.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_pipe_c_TREADY.read()))) {
        pipe_c_TVALID = ap_const_logic_1;
    } else {
        pipe_c_TVALID = ap_const_logic_0;
    }
}

void krnl_adder::thread_tmp_1_fu_152_p2() {
    tmp_1_fu_152_p2 = (!i_0_reg2mem10_0_i_i_cast_fu_148_p1.read().is_01() || !arg_n_elements_reg_248.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_reg2mem10_0_i_i_cast_fu_148_p1.read()) < sc_bigint<32>(arg_n_elements_reg_248.read()));
}

void krnl_adder::thread_tmp_2_fu_185_p4() {
    tmp_2_fu_185_p4 = pipe_b_count.read().range(31, 1);
}

void krnl_adder::thread_tmp_3_fu_179_p2() {
    tmp_3_fu_179_p2 = (!pipe_a_count.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(pipe_a_count.read() == ap_const_lv32_0);
}

void krnl_adder::thread_tmp_4_fu_207_p4() {
    tmp_4_fu_207_p4 = pipe_c_count.read().range(31, 7);
}

void krnl_adder::thread_tmp_5_fu_201_p2() {
    tmp_5_fu_201_p2 = (!pipe_b_count.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(pipe_b_count.read() == ap_const_lv32_0);
}

void krnl_adder::thread_tmp_fu_163_p4() {
    tmp_fu_163_p4 = pipe_a_count.read().range(31, 1);
}

void krnl_adder::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_1_fu_152_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void krnl_adder::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_a_TDATA\" :  \"" << pipe_a_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_a_TVALID\" :  \"" << pipe_a_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pipe_a_TREADY\" :  \"" << pipe_a_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_a_count\" :  \"" << pipe_a_count.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_b_TDATA\" :  \"" << pipe_b_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_b_TVALID\" :  \"" << pipe_b_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pipe_b_TREADY\" :  \"" << pipe_b_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_b_count\" :  \"" << pipe_b_count.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pipe_c_TDATA\" :  \"" << pipe_c_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"pipe_c_TVALID\" :  \"" << pipe_c_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_c_TREADY\" :  \"" << pipe_c_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"pipe_c_count\" :  \"" << pipe_c_count.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

