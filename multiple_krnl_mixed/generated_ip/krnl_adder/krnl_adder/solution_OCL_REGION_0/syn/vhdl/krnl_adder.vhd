-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_adder is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    pipe_a_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    pipe_a_TVALID : IN STD_LOGIC;
    pipe_a_TREADY : OUT STD_LOGIC;
    pipe_a_count : IN STD_LOGIC_VECTOR (31 downto 0);
    pipe_b_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    pipe_b_TVALID : IN STD_LOGIC;
    pipe_b_TREADY : OUT STD_LOGIC;
    pipe_b_count : IN STD_LOGIC_VECTOR (31 downto 0);
    pipe_c_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    pipe_c_TVALID : OUT STD_LOGIC;
    pipe_c_TREADY : IN STD_LOGIC;
    pipe_c_count : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of krnl_adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_adder,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.514000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=419,HLS_SYN_LUT=842}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_GMEM_TARGET_ADDR : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_rst_n_inv : STD_LOGIC := '1';
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal n_elements : STD_LOGIC_VECTOR (31 downto 0);
    signal p_xcl_gv_pipe_a : STD_LOGIC_VECTOR (63 downto 0);
    signal p_xcl_gv_pipe_b : STD_LOGIC_VECTOR (63 downto 0);
    signal p_xcl_gv_pipe_c : STD_LOGIC_VECTOR (63 downto 0);
    signal pipe_a_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pipe_b_TDATA_blk_n : STD_LOGIC;
    signal icmp5_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pipe_c_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp8_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg2mem10_0_i_i_reg_127 : STD_LOGIC_VECTOR (30 downto 0);
    signal arg_n_elements_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op36_read_state2 : BOOLEAN;
    signal ap_predicate_op41_read_state2 : BOOLEAN;
    signal ap_predicate_op47_read_state2 : BOOLEAN;
    signal ap_predicate_op52_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_pipe_c_TREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_reg2mem_0_i_i_fu_157_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp8_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal p_0_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_01_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_pipe_c_TREADY : STD_LOGIC := '0';
    signal i_0_reg2mem10_0_i_i_cast_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_163_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_185_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_207_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_363 : BOOLEAN;

    component krnl_adder_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        n_elements : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_xcl_gv_pipe_a : OUT STD_LOGIC_VECTOR (63 downto 0);
        p_xcl_gv_pipe_b : OUT STD_LOGIC_VECTOR (63 downto 0);
        p_xcl_gv_pipe_c : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    krnl_adder_control_s_axi_U : component krnl_adder_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        n_elements => n_elements,
        p_xcl_gv_pipe_a => p_xcl_gv_pipe_a,
        p_xcl_gv_pipe_b => p_xcl_gv_pipe_b,
        p_xcl_gv_pipe_c => p_xcl_gv_pipe_c);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_pipe_c_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_pipe_c_TREADY <= ap_const_logic_0;
            else
                if ((ap_condition_363 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_pipe_c_TREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = pipe_c_TREADY))) then 
                        ap_reg_ioackin_pipe_c_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_n_inv <= not(ap_rst_n);
        end if;
    end process;

    i_0_reg2mem10_0_i_i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
                i_0_reg2mem10_0_i_i_reg_127 <= p_reg2mem_0_i_i_fu_157_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg2mem10_0_i_i_reg_127 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                arg_n_elements_reg_248 <= n_elements;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                icmp8_reg_278 <= icmp8_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op36_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op41_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)))) then
                p_01_fu_80 <= pipe_a_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op47_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op52_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)))) then
                p_0_fu_76 <= pipe_b_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, tmp_1_fu_152_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_1_fu_152_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_1_fu_152_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(pipe_a_TVALID, pipe_b_TVALID, ap_enable_reg_pp0_iter0, ap_predicate_op36_read_state2, ap_predicate_op41_read_state2, ap_predicate_op47_read_state2, ap_predicate_op52_read_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op36_read_state2)) or ((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op41_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op47_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op52_read_state2))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(pipe_a_TVALID, pipe_b_TVALID, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_predicate_op36_read_state2, ap_predicate_op41_read_state2, ap_predicate_op47_read_state2, ap_predicate_op52_read_state2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op36_read_state2)) or ((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op41_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op47_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op52_read_state2)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(pipe_a_TVALID, pipe_b_TVALID, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_predicate_op36_read_state2, ap_predicate_op41_read_state2, ap_predicate_op47_read_state2, ap_predicate_op52_read_state2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op36_read_state2)) or ((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op41_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op47_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op52_read_state2)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(pipe_a_TVALID, pipe_b_TVALID, ap_predicate_op36_read_state2, ap_predicate_op41_read_state2, ap_predicate_op47_read_state2, ap_predicate_op52_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op36_read_state2)) or ((ap_const_logic_0 = pipe_a_TVALID) and (ap_const_boolean_1 = ap_predicate_op41_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op47_read_state2)) or ((ap_const_logic_0 = pipe_b_TVALID) and (ap_const_boolean_1 = ap_predicate_op52_read_state2)));
    end process;


    ap_block_state3_io_assign_proc : process(icmp8_reg_278, ap_sig_ioackin_pipe_c_TREADY)
    begin
                ap_block_state3_io <= ((ap_const_lv1_1 = icmp8_reg_278) and (ap_const_logic_0 = ap_sig_ioackin_pipe_c_TREADY));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_363_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp8_reg_278)
    begin
                ap_condition_363 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = icmp8_reg_278));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_1_fu_152_p2)
    begin
        if ((tmp_1_fu_152_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op36_read_state2_assign_proc : process(tmp_1_fu_152_p2, icmp_fu_173_p2)
    begin
                ap_predicate_op36_read_state2 <= ((tmp_1_fu_152_p2 = ap_const_lv1_1) and (icmp_fu_173_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op41_read_state2_assign_proc : process(tmp_1_fu_152_p2, icmp_fu_173_p2, tmp_3_fu_179_p2)
    begin
                ap_predicate_op41_read_state2 <= ((tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = icmp_fu_173_p2) and (ap_const_lv1_0 = tmp_3_fu_179_p2));
    end process;


    ap_predicate_op47_read_state2_assign_proc : process(tmp_1_fu_152_p2, icmp5_fu_195_p2)
    begin
                ap_predicate_op47_read_state2 <= ((tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = icmp5_fu_195_p2));
    end process;


    ap_predicate_op52_read_state2_assign_proc : process(tmp_1_fu_152_p2, icmp5_fu_195_p2, tmp_5_fu_201_p2)
    begin
                ap_predicate_op52_read_state2 <= ((tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = icmp5_fu_195_p2) and (ap_const_lv1_0 = tmp_5_fu_201_p2));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_pipe_c_TREADY_assign_proc : process(pipe_c_TREADY, ap_reg_ioackin_pipe_c_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_pipe_c_TREADY)) then 
            ap_sig_ioackin_pipe_c_TREADY <= pipe_c_TREADY;
        else 
            ap_sig_ioackin_pipe_c_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    i_0_reg2mem10_0_i_i_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg2mem10_0_i_i_reg_127),32));
    icmp5_fu_195_p2 <= "1" when (tmp_2_fu_185_p4 = ap_const_lv31_0) else "0";
    icmp8_fu_217_p2 <= "1" when (tmp_4_fu_207_p4 = ap_const_lv25_0) else "0";
    icmp_fu_173_p2 <= "1" when (tmp_fu_163_p4 = ap_const_lv31_0) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv8_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv8_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    p_reg2mem_0_i_i_fu_157_p2 <= std_logic_vector(unsigned(i_0_reg2mem10_0_i_i_reg_127) + unsigned(ap_const_lv31_1));

    pipe_a_TDATA_blk_n_assign_proc : process(pipe_a_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_1_fu_152_p2, icmp_fu_173_p2, tmp_3_fu_179_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (tmp_1_fu_152_p2 = ap_const_lv1_1) and (icmp_fu_173_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = icmp_fu_173_p2) and (ap_const_lv1_0 = tmp_3_fu_179_p2)))) then 
            pipe_a_TDATA_blk_n <= pipe_a_TVALID;
        else 
            pipe_a_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pipe_a_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op36_read_state2, ap_predicate_op41_read_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op36_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op41_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)))) then 
            pipe_a_TREADY <= ap_const_logic_1;
        else 
            pipe_a_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    pipe_b_TDATA_blk_n_assign_proc : process(pipe_b_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_1_fu_152_p2, icmp5_fu_195_p2, tmp_5_fu_201_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = icmp5_fu_195_p2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (tmp_1_fu_152_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = icmp5_fu_195_p2) and (ap_const_lv1_0 = tmp_5_fu_201_p2)))) then 
            pipe_b_TDATA_blk_n <= pipe_b_TVALID;
        else 
            pipe_b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pipe_b_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op47_read_state2, ap_predicate_op52_read_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op47_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_predicate_op52_read_state2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)))) then 
            pipe_b_TREADY <= ap_const_logic_1;
        else 
            pipe_b_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    pipe_c_TDATA <= std_logic_vector(unsigned(p_01_fu_80) + unsigned(p_0_fu_76));

    pipe_c_TDATA_blk_n_assign_proc : process(pipe_c_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp8_reg_278)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = icmp8_reg_278))) then 
            pipe_c_TDATA_blk_n <= pipe_c_TREADY;
        else 
            pipe_c_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pipe_c_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp8_reg_278, ap_block_pp0_stage0_01001, ap_reg_ioackin_pipe_c_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = icmp8_reg_278) and (ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_pipe_c_TREADY))) then 
            pipe_c_TVALID <= ap_const_logic_1;
        else 
            pipe_c_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_152_p2 <= "1" when (signed(i_0_reg2mem10_0_i_i_cast_fu_148_p1) < signed(arg_n_elements_reg_248)) else "0";
    tmp_2_fu_185_p4 <= pipe_b_count(31 downto 1);
    tmp_3_fu_179_p2 <= "1" when (pipe_a_count = ap_const_lv32_0) else "0";
    tmp_4_fu_207_p4 <= pipe_c_count(31 downto 7);
    tmp_5_fu_201_p2 <= "1" when (pipe_b_count = ap_const_lv32_0) else "0";
    tmp_fu_163_p4 <= pipe_a_count(31 downto 1);
end behav;
