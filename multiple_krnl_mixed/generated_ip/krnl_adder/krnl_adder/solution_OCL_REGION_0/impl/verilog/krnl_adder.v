// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="krnl_adder,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.514000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=419,HLS_SYN_LUT=842}" *)

module krnl_adder (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        pipe_a_TDATA,
        pipe_a_TVALID,
        pipe_a_TREADY,
        pipe_a_count,
        pipe_b_TDATA,
        pipe_b_TVALID,
        pipe_b_TREADY,
        pipe_b_count,
        pipe_c_TDATA,
        pipe_c_TVALID,
        pipe_c_TREADY,
        pipe_c_count,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_TARGET_ADDR = 0;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] pipe_a_TDATA;
input   pipe_a_TVALID;
output   pipe_a_TREADY;
input  [31:0] pipe_a_count;
input  [31:0] pipe_b_TDATA;
input   pipe_b_TVALID;
output   pipe_b_TREADY;
input  [31:0] pipe_b_count;
output  [31:0] pipe_c_TDATA;
output   pipe_c_TVALID;
input   pipe_c_TREADY;
input  [31:0] pipe_c_count;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg pipe_a_TREADY;
reg pipe_b_TREADY;
reg pipe_c_TVALID;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] n_elements;
wire   [63:0] p_xcl_gv_pipe_a;
wire   [63:0] p_xcl_gv_pipe_b;
wire   [63:0] p_xcl_gv_pipe_c;
reg    pipe_a_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_1_fu_152_p2;
wire   [0:0] icmp_fu_173_p2;
wire   [0:0] tmp_3_fu_179_p2;
reg    pipe_b_TDATA_blk_n;
wire   [0:0] icmp5_fu_195_p2;
wire   [0:0] tmp_5_fu_201_p2;
reg    pipe_c_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp8_reg_278;
reg   [30:0] i_0_reg2mem10_0_i_i_reg_127;
reg   [31:0] arg_n_elements_reg_248;
reg    ap_predicate_op36_read_state2;
reg    ap_predicate_op41_read_state2;
reg    ap_predicate_op47_read_state2;
reg    ap_predicate_op52_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_sig_ioackin_pipe_c_TREADY;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] p_reg2mem_0_i_i_fu_157_p2;
wire   [0:0] icmp8_fu_217_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] p_0_fu_76;
reg   [31:0] p_01_fu_80;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_pipe_c_TREADY;
wire   [31:0] i_0_reg2mem10_0_i_i_cast_fu_148_p1;
wire   [30:0] tmp_fu_163_p4;
wire   [30:0] tmp_2_fu_185_p4;
wire   [24:0] tmp_4_fu_207_p4;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_363;

// power-on initialization
initial begin
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_pipe_c_TREADY = 1'b0;
end

krnl_adder_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
krnl_adder_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .n_elements(n_elements),
    .p_xcl_gv_pipe_a(p_xcl_gv_pipe_a),
    .p_xcl_gv_pipe_b(p_xcl_gv_pipe_b),
    .p_xcl_gv_pipe_c(p_xcl_gv_pipe_c)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_pipe_c_TREADY <= 1'b0;
    end else begin
        if ((ap_condition_363 == 1'b1)) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_pipe_c_TREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == pipe_c_TREADY))) begin
                ap_reg_ioackin_pipe_c_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_1_fu_152_p2 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        i_0_reg2mem10_0_i_i_reg_127 <= p_reg2mem_0_i_i_fu_157_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg2mem10_0_i_i_reg_127 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        arg_n_elements_reg_248 <= n_elements;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_fu_152_p2 == 1'd1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        icmp8_reg_278 <= icmp8_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op36_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op41_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)))) begin
        p_01_fu_80 <= pipe_a_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op47_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op52_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)))) begin
        p_0_fu_76 <= pipe_b_TDATA;
    end
end

always @ (*) begin
    if ((tmp_1_fu_152_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_pipe_c_TREADY)) begin
        ap_sig_ioackin_pipe_c_TREADY = pipe_c_TREADY;
    end else begin
        ap_sig_ioackin_pipe_c_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0 == 1'b0) & (tmp_1_fu_152_p2 == 1'd1) & (icmp_fu_173_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0 == 1'b0) & (tmp_1_fu_152_p2 == 1'd1) & (1'd1 == icmp_fu_173_p2) & (1'd0 == tmp_3_fu_179_p2)))) begin
        pipe_a_TDATA_blk_n = pipe_a_TVALID;
    end else begin
        pipe_a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op36_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op41_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)))) begin
        pipe_a_TREADY = 1'b1;
    end else begin
        pipe_a_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0 == 1'b0) & (tmp_1_fu_152_p2 == 1'd1) & (1'd0 == icmp5_fu_195_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0 == 1'b0) & (tmp_1_fu_152_p2 == 1'd1) & (1'd1 == icmp5_fu_195_p2) & (1'd0 == tmp_5_fu_201_p2)))) begin
        pipe_b_TDATA_blk_n = pipe_b_TVALID;
    end else begin
        pipe_b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op47_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op52_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0)))) begin
        pipe_b_TREADY = 1'b1;
    end else begin
        pipe_b_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == icmp8_reg_278))) begin
        pipe_c_TDATA_blk_n = pipe_c_TREADY;
    end else begin
        pipe_c_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == icmp8_reg_278) & (ap_block_pp0_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_pipe_c_TREADY))) begin
        pipe_c_TVALID = 1'b1;
    end else begin
        pipe_c_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_1_fu_152_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_1_fu_152_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op36_read_state2)) | ((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op41_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op47_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op52_read_state2))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op36_read_state2)) | ((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op41_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op47_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op52_read_state2)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_enable_reg_pp0_iter0) & (((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op36_read_state2)) | ((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op41_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op47_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op52_read_state2)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op36_read_state2)) | ((1'b0 == pipe_a_TVALID) & (1'b1 == ap_predicate_op41_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op47_read_state2)) | ((1'b0 == pipe_b_TVALID) & (1'b1 == ap_predicate_op52_read_state2)));
end

always @ (*) begin
    ap_block_state3_io = ((1'd1 == icmp8_reg_278) & (1'b0 == ap_sig_ioackin_pipe_c_TREADY));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_363 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == icmp8_reg_278));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op36_read_state2 = ((tmp_1_fu_152_p2 == 1'd1) & (icmp_fu_173_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op41_read_state2 = ((tmp_1_fu_152_p2 == 1'd1) & (1'd1 == icmp_fu_173_p2) & (1'd0 == tmp_3_fu_179_p2));
end

always @ (*) begin
    ap_predicate_op47_read_state2 = ((tmp_1_fu_152_p2 == 1'd1) & (1'd0 == icmp5_fu_195_p2));
end

always @ (*) begin
    ap_predicate_op52_read_state2 = ((tmp_1_fu_152_p2 == 1'd1) & (1'd1 == icmp5_fu_195_p2) & (1'd0 == tmp_5_fu_201_p2));
end

assign i_0_reg2mem10_0_i_i_cast_fu_148_p1 = i_0_reg2mem10_0_i_i_reg_127;

assign icmp5_fu_195_p2 = ((tmp_2_fu_185_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp8_fu_217_p2 = ((tmp_4_fu_207_p4 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_fu_173_p2 = ((tmp_fu_163_p4 == 31'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 8'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 8'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign p_reg2mem_0_i_i_fu_157_p2 = (i_0_reg2mem10_0_i_i_reg_127 + 31'd1);

assign pipe_c_TDATA = (p_01_fu_80 + p_0_fu_76);

assign tmp_1_fu_152_p2 = (($signed(i_0_reg2mem10_0_i_i_cast_fu_148_p1) < $signed(arg_n_elements_reg_248)) ? 1'b1 : 1'b0);

assign tmp_2_fu_185_p4 = {{pipe_b_count[31:1]}};

assign tmp_3_fu_179_p2 = ((pipe_a_count == 32'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_207_p4 = {{pipe_c_count[31:7]}};

assign tmp_5_fu_201_p2 = ((pipe_b_count == 32'd0) ? 1'b1 : 1'b0);

assign tmp_fu_163_p4 = {{pipe_a_count[31:1]}};

endmodule //krnl_adder
